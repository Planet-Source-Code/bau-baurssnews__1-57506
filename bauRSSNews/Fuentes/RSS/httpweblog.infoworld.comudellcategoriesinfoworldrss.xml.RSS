<?xml version="1.0"?>
<!-- RSS generated by Radio UserLand v8.0.7 on Mon, 29 Nov 2004 16:25:55 GMT -->
<rss version="2.0"  xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/"  xml:base="http://weblog.infoworld.com">
	<channel>
		<title>Jon Udell: InfoWorld</title>
		<link>http://weblog.infoworld.com/udell/categories/infoworld/</link>
		<description>Jon&apos;s InfoWorld articles</description>
		<language>en-us</language>
		<lastBuildDate>Mon, 29 Nov 2004 16:25:55 GMT</lastBuildDate>
		<dc:creator>Jon Udell, judell@mv.com</dc:creator>
		<dc:rights>Copyright 2004 Jon Udell</dc:rights>
		<dc:publisher>InfoWorld</dc:publisher>
		<item>
			<title>Whatever happened to SVG?</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/11/29.html#a1122</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
In his &lt;a href=&quot;http://www.microsoft.com/billgates/speeches/2000/06-22f2k.asp&quot;&gt;.Net rollout speech&lt;/a&gt; four years ago, Bill Gates used the memorable phrase &lt;i&gt;universal canvas&lt;/i&gt; to describe this concept. At the time, Internet Explorer&apos;s support for open XML and Web standards was still advancing. Now, of course, it&apos;s back to business as usual at Microsoft. In the realm of graphics, Longhorn&apos;s XAML (Extensible Application Markup Language) turns inward, reinventing SVG rather than supporting it.
&lt;br/&gt;&lt;br/&gt;
It&apos;s tempting to conclude that SVG just plain failed. Yet it keeps popping up on my radar screen lately. Case in point: Lighthammer Software&apos;s innovative use of SVG. The company&apos;s toolkit creates applications for the manufacturing sector, where dashboard-style visualization of meters and gauges is a key requirement. As Lighthammer&apos;s CTO Rick Bullotta showed me in &lt;a href=&quot;http://weblog.infoworld.com/udell/2004/11/10.html#a1111&quot;&gt;a video demonstration&lt;/a&gt;, the toolkit can animate user-supplied drawings of these widgets -- if the drawings are provided in SVG format. Tools that export SVG include Adobe Illustrator and open source vector illustration programs such as &lt;a href=&quot;http:/www.inkscape.org&quot;&gt;Inkscape&lt;/a&gt; and &lt;a href=&quot;http://sourceforge.net/projects/sodipodi/&quot;&gt;Sodipodi&lt;/a&gt;. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/11/19/47OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
In his &lt;a href=&quot;http://www.microsoft.com/billgates/speeches/2000/06-22f2k.asp&quot;&gt;.Net rollout speech&lt;/a&gt; four years ago, Bill Gates used the memorable phrase &lt;i&gt;universal canvas&lt;/i&gt; to describe this concept. At the time, Internet Explorer&apos;s support for open XML and Web standards was still advancing. Now, of course, it&apos;s back to business as usual at Microsoft. In the realm of graphics, Longhorn&apos;s XAML (Extensible Application Markup Language) turns inward, reinventing SVG rather than supporting it.
&lt;br/&gt;&lt;br/&gt;
It&apos;s tempting to conclude that SVG just plain failed. Yet it keeps popping up on my radar screen lately. Case in point: Lighthammer Software&apos;s innovative use of SVG. The company&apos;s toolkit creates applications for the manufacturing sector, where dashboard-style visualization of meters and gauges is a key requirement. As Lighthammer&apos;s CTO Rick Bullotta showed me in &lt;a href=&quot;http://weblog.infoworld.com/udell/2004/11/10.html#a1111&quot;&gt;a video demonstration&lt;/a&gt;, the toolkit can animate user-supplied drawings of these widgets -- if the drawings are provided in SVG format. Tools that export SVG include Adobe Illustrator and open source vector illustration programs such as &lt;a href=&quot;http:/www.inkscape.org&quot;&gt;Inkscape&lt;/a&gt; and &lt;a href=&quot;http://sourceforge.net/projects/sodipodi/&quot;&gt;Sodipodi&lt;/a&gt;. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/11/19/47OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
Several folks wrote to say, in effect, &quot;Be patient, these things take time.&quot; A couple of years ago, I wouldn&apos;t have predicted that Mozilla, in the form of Firefox, would stage the comeback that it has. Today, although Firefox neither enables SVG by default nor includes the most up-to-date code from Mozilla&apos;s SVG implementation, it seems plausible that these things will come together over the next year or so. There&apos;s also been movement on the Adobe front. The current plug-in is &lt;a href=&quot;http://www.adobe.com/svg/viewer/install/main.html&quot;&gt;version 3&lt;/a&gt;, but last summer, Adobe released an &lt;a href=&quot;http://www.adobe.com/svg/viewer/install/beta.html&quot;&gt;preview of version 6&lt;/a&gt;. (Versions 4 and 5 were, evidently, stillborn.)
&lt;/p&gt;
&lt;p&gt;
Among the applications that could ultimately drive mainstream use of SVG, mapping seems most compelling. As a developer, I want to be able to fuse data with maps that work like component libraries. As a user, I want to do more than just view those fusions. I want to select subsets, annotate them, copy and paste them, publish them, and intelligently search them. As more devices produce location data and more applications use that data, these use cases will become more obvious.
&lt;/p&gt;
&lt;p&gt;
Patience.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
In his <a href="http://www.microsoft.com/billgates/speeches/2000/06-22f2k.asp">.Net rollout speech</a> four years ago, Bill Gates used the memorable phrase <i>universal canvas</i> to describe this concept. At the time, Internet Explorer's support for open XML and Web standards was still advancing. Now, of course, it's back to business as usual at Microsoft. In the realm of graphics, Longhorn's XAML (Extensible Application Markup Language) turns inward, reinventing SVG rather than supporting it.
<br/><br/>
It's tempting to conclude that SVG just plain failed. Yet it keeps popping up on my radar screen lately. Case in point: Lighthammer Software's innovative use of SVG. The company's toolkit creates applications for the manufacturing sector, where dashboard-style visualization of meters and gauges is a key requirement. As Lighthammer's CTO Rick Bullotta showed me in <a href="http://weblog.infoworld.com/udell/2004/11/10.html#a1111">a video demonstration</a>, the toolkit can animate user-supplied drawings of these widgets -- if the drawings are provided in SVG format. Tools that export SVG include Adobe Illustrator and open source vector illustration programs such as <a href="http:/www.inkscape.org">Inkscape</a> and <a href="http://sourceforge.net/projects/sodipodi/">Sodipodi</a>. [Full story at <a href="http://www.infoworld.com/article/04/11/19/47OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
</p>
<p>
Several folks wrote to say, in effect, "Be patient, these things take time." A couple of years ago, I wouldn't have predicted that Mozilla, in the form of Firefox, would stage the comeback that it has. Today, although Firefox neither enables SVG by default nor includes the most up-to-date code from Mozilla's SVG implementation, it seems plausible that these things will come together over the next year or so. There's also been movement on the Adobe front. The current plug-in is <a href="http://www.adobe.com/svg/viewer/install/main.html">version 3</a>, but last summer, Adobe released an <a href="http://www.adobe.com/svg/viewer/install/beta.html">preview of version 6</a>. (Versions 4 and 5 were, evidently, stillborn.)
</p>
<p>
Among the applications that could ultimately drive mainstream use of SVG, mapping seems most compelling. As a developer, I want to be able to fuse data with maps that work like component libraries. As a user, I want to do more than just view those fusions. I want to select subsets, annotate them, copy and paste them, publish them, and intelligently search them. As more devices produce location data and more applications use that data, these use cases will become more obvious.
</p>
<p>
Patience.
</p>

			</body>
			<dc:date>2004-11-29T10:52:10-05:00</dc:date>
			</item>
		<item>
			<title>Speech recognition circa 2004</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/11/18.html#a1117</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
If you&apos;ve never tried dictation, you can get a sense of how it works by watching a &lt;s&gt;video&lt;/s&gt; &lt;a href=&quot;http://weblog.infoworld.com/udell/2004/11/04.html&quot;&gt;screencast&lt;/a&gt; I made shortly after I installed Version 8 of NaturallySpeaking. The out-of-the-box experience was dramatically better than before. It got even better when I fed the program all the articles and blog entries I&apos;ve written during the past few years.
&lt;br/&gt;&lt;br/&gt;
&lt;b&gt;...&lt;/b&gt;
&lt;br/&gt;&lt;br/&gt;
What I find most interesting about this process is the way in which I train the computer to be an intelligent assistant. Because recognition accuracy is such a difficult problem, dictation software has to pay very close attention to me. It has to learn everything it can about my speech patterns, vocabulary, and writing style. And it must leverage all this information to the maximum degree possible.
&lt;br/&gt;&lt;br/&gt;
Perhaps because we imagine that other application domains are not as challenging, other programs pay strikingly little attention to what we do. Sure, the browser will remember the last thing that you typed into a field on a form, and your e-mail program will help you keep track of whom you&apos;ve replied to. But by and large, our so-called productivity software does not monitor what we do, is not meaningfully trainable, and does not grow more valuable over time as our relationship with it deepens. We are creatures of habit, but we are ill-served by software that does not notice or respond to those habits. When I organize my e-mail or conduct research on the Web, I exhibit predictable patterns of behavior. We have long expected but rarely experienced personal productivity software that absorbs those patterns, automates repetitive chores, and can be taught to improve its performance. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/11/12/46OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
If you&apos;ve never tried dictation, you can get a sense of how it works by watching a &lt;s&gt;video&lt;/s&gt; &lt;a href=&quot;http://weblog.infoworld.com/udell/2004/11/04.html&quot;&gt;screencast&lt;/a&gt; I made shortly after I installed Version 8 of NaturallySpeaking. The out-of-the-box experience was dramatically better than before. It got even better when I fed the program all the articles and blog entries I&apos;ve written during the past few years.
&lt;br/&gt;&lt;br/&gt;
&lt;b&gt;...&lt;/b&gt;
&lt;br/&gt;&lt;br/&gt;
What I find most interesting about this process is the way in which I train the computer to be an intelligent assistant. Because recognition accuracy is such a difficult problem, dictation software has to pay very close attention to me. It has to learn everything it can about my speech patterns, vocabulary, and writing style. And it must leverage all this information to the maximum degree possible.
&lt;br/&gt;&lt;br/&gt;
Perhaps because we imagine that other application domains are not as challenging, other programs pay strikingly little attention to what we do. Sure, the browser will remember the last thing that you typed into a field on a form, and your e-mail program will help you keep track of whom you&apos;ve replied to. But by and large, our so-called productivity software does not monitor what we do, is not meaningfully trainable, and does not grow more valuable over time as our relationship with it deepens. We are creatures of habit, but we are ill-served by software that does not notice or respond to those habits. When I organize my e-mail or conduct research on the Web, I exhibit predictable patterns of behavior. We have long expected but rarely experienced personal productivity software that absorbs those patterns, automates repetitive chores, and can be taught to improve its performance. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/11/12/46OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
People reacted to the screencast in quite different ways. It &lt;a href=&quot;http://www.sellsbrothers.com/news/showTopic.aspx?ixTopic=1572&quot;&gt;knocked Chris Sells&apos; socks off&lt;/a&gt;, and Jeremy Zawodny found it &lt;a href=&quot;http://jeremy.zawodny.com/linkblog/&quot;&gt;oddly compelling&lt;/a&gt;, but Darren Barefoot was &lt;a href=&quot;http://www.darrenbarefoot.com/archives/001365.html&quot;&gt;underwhelmed&lt;/a&gt;. That&apos;s understandable. Software whose performance is so intimately related to human performance can&apos;t easily be assimilated. The acceptance threshold will vary wildly from one person to the next, and crossing it takes you deeper into &lt;a href=&quot;http://weblog.infoworld.com/udell/2003/12/02.html&quot;&gt;cyborg&lt;/a&gt; territory.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;http://blogs.msdn.com/sprague/&quot;&gt;Richard Sprague&lt;/a&gt;, who works on speech technologies at Microsoft, has a &lt;a href=&quot;http://blogs.msdn.com/sprague/archive/2004/10/22/246506.aspx&quot;&gt;chart&lt;/a&gt; that illustrates how speech recognition is on the glide path toward becoming &quot;uncannily useful.&quot; I&apos;m inclined to agree. It&apos;ll be fascinating to compare my 2004 dictation screencast with future editions!
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
If you've never tried dictation, you can get a sense of how it works by watching a <s>video</s> <a href="http://weblog.infoworld.com/udell/2004/11/04.html">screencast</a> I made shortly after I installed Version 8 of NaturallySpeaking. The out-of-the-box experience was dramatically better than before. It got even better when I fed the program all the articles and blog entries I've written during the past few years.
<br/><br/>
<b>...</b>
<br/><br/>
What I find most interesting about this process is the way in which I train the computer to be an intelligent assistant. Because recognition accuracy is such a difficult problem, dictation software has to pay very close attention to me. It has to learn everything it can about my speech patterns, vocabulary, and writing style. And it must leverage all this information to the maximum degree possible.
<br/><br/>
Perhaps because we imagine that other application domains are not as challenging, other programs pay strikingly little attention to what we do. Sure, the browser will remember the last thing that you typed into a field on a form, and your e-mail program will help you keep track of whom you've replied to. But by and large, our so-called productivity software does not monitor what we do, is not meaningfully trainable, and does not grow more valuable over time as our relationship with it deepens. We are creatures of habit, but we are ill-served by software that does not notice or respond to those habits. When I organize my e-mail or conduct research on the Web, I exhibit predictable patterns of behavior. We have long expected but rarely experienced personal productivity software that absorbs those patterns, automates repetitive chores, and can be taught to improve its performance. [Full story at <a href="http://www.infoworld.com/article/04/11/12/46OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
</p>
<p>
People reacted to the screencast in quite different ways. It <a href="http://www.sellsbrothers.com/news/showTopic.aspx?ixTopic=1572">knocked Chris Sells' socks off</a>, and Jeremy Zawodny found it <a href="http://jeremy.zawodny.com/linkblog/">oddly compelling</a>, but Darren Barefoot was <a href="http://www.darrenbarefoot.com/archives/001365.html">underwhelmed</a>. That's understandable. Software whose performance is so intimately related to human performance can't easily be assimilated. The acceptance threshold will vary wildly from one person to the next, and crossing it takes you deeper into <a href="http://weblog.infoworld.com/udell/2003/12/02.html">cyborg</a> territory.
</p>
<p>
<a href="http://blogs.msdn.com/sprague/">Richard Sprague</a>, who works on speech technologies at Microsoft, has a <a href="http://blogs.msdn.com/sprague/archive/2004/10/22/246506.aspx">chart</a> that illustrates how speech recognition is on the glide path toward becoming "uncannily useful." I'm inclined to agree. It'll be fascinating to compare my 2004 dictation screencast with future editions!
</p>

			</body>
			<dc:date>2004-11-18T11:22:58-05:00</dc:date>
			</item>
		<item>
			<title>Can rich Internet apps be web-friendly?</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/11/09.html#a1110</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
In my &lt;a href=&quot;http://www.infoworld.com/article/04/10/22/43OPstrategic_1.html&quot;&gt;October 22 column&lt;/a&gt;, I
argued that Gmail&apos;s aggressive use of dynamic HTML qualifies it as a
kind of rich Internet application (RIA). As email correspondents and
bloggers pointed out, the technique has a fairly long history. Many
many wonder why it remains on the fringe. The reason, I think, is
partly a weakness common to all RIA technologies. Whether it&apos;s based
on DHTML, Java, Flash, .NET, or just a standard GUI, an RIA has a
client/server architecture. Unlike a Web application which manages
state information almost entirely on the server, though, an RIA
achieves a more balanced distribution of that information between
client and server. The benefits that flow from this arrangement can
include responsiveness, context preservation, and offline capability.
To achieve these benefits, though, we have to make some painful
tradeoffs.
&lt;br/&gt;&lt;br/&gt;&lt;b&gt;...&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;
 RIAs are protocol-driven. A programmer
who masters an application&apos;s protocols can extend it or combine it
with other applications. But there are no integration hooks available
to the user. In a Web application, those hooks are simply URLs.
Consider what happens when you include a MapQuest URL in an email to
someone. A piece of state information -- namely, the state of the
MapQuest viewer when displaying a given location -- has been reduced
to a token that one person can hand to another. The same thing can
usefully apply to the state of a shopping cart, or an airline
reservation.
&lt;br/&gt;&lt;br/&gt;&lt;b&gt;...&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;
The idea that an application wears its state information on its
sleeve, readily available for users to bookmark, modify, and trade, is
an underappreciated strength of Web-based software. As the RIA
bandwagon picks up steam, let&apos;s honor that idea and find a way to move
it forward. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/11/05/45OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
In my &lt;a href=&quot;http://www.infoworld.com/article/04/10/22/43OPstrategic_1.html&quot;&gt;October 22 column&lt;/a&gt;, I
argued that Gmail&apos;s aggressive use of dynamic HTML qualifies it as a
kind of rich Internet application (RIA). As email correspondents and
bloggers pointed out, the technique has a fairly long history. Many
many wonder why it remains on the fringe. The reason, I think, is
partly a weakness common to all RIA technologies. Whether it&apos;s based
on DHTML, Java, Flash, .NET, or just a standard GUI, an RIA has a
client/server architecture. Unlike a Web application which manages
state information almost entirely on the server, though, an RIA
achieves a more balanced distribution of that information between
client and server. The benefits that flow from this arrangement can
include responsiveness, context preservation, and offline capability.
To achieve these benefits, though, we have to make some painful
tradeoffs.
&lt;br/&gt;&lt;br/&gt;&lt;b&gt;...&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;
 RIAs are protocol-driven. A programmer
who masters an application&apos;s protocols can extend it or combine it
with other applications. But there are no integration hooks available
to the user. In a Web application, those hooks are simply URLs.
Consider what happens when you include a MapQuest URL in an email to
someone. A piece of state information -- namely, the state of the
MapQuest viewer when displaying a given location -- has been reduced
to a token that one person can hand to another. The same thing can
usefully apply to the state of a shopping cart, or an airline
reservation.
&lt;br/&gt;&lt;br/&gt;&lt;b&gt;...&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;
The idea that an application wears its state information on its
sleeve, readily available for users to bookmark, modify, and trade, is
an underappreciated strength of Web-based software. As the RIA
bandwagon picks up steam, let&apos;s honor that idea and find a way to move
it forward. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/11/05/45OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
Over the past few weeks I&apos;ve discussed this idea with folks at Macromedia and Laszlo. It&apos;s related to what Adam Bosworth has been saying recently:
&lt;blockquote class=&quot;personQuote AdamBosworth&quot;&gt;
The customers are, very literally, in control. Think of it as democracy versus totalitarianism. This last point showed up almost from day one in the web. The user interface customized itself to the users needs, location, and data in a dynamic way through the magic of dynamic page layout. Today, a full ten years later, most windows apps still don&apos;t do that. But heck they are only 2 or 3 or 4 generations evolved. Services, in the last decade, may have evolved 600 times by now all in reaction to what they have learned directly from customer use. [&lt;a href=&quot;http://www.adambosworth.net/archives/000028.html&quot;&gt;Adam Bosworth&lt;/a&gt;]
&lt;/blockquote&gt; 
When Adam says &quot;the user interface customizes itself,&quot; his language obscures a key point. Who does the customizing -- the developer or the user? I think the answer has to be: both. The web&apos;s rapid evolution is not merely the explosive result of zero-install dynamics. REST pours fuel on the fire. The web&apos;s architecture is compositional. When you expose application state on the URL-line, to the maximum degree possible, users and developers become co-composers.
&lt;/p&gt;
&lt;p&gt;
Flash needs to figure out how to enable this collaboration, fundamentally and pervasively. Likewise DHTML. Likewise Java, .NET, and all the first-generation GUIs.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
In my <a href="http://www.infoworld.com/article/04/10/22/43OPstrategic_1.html">October 22 column</a>, I
argued that Gmail's aggressive use of dynamic HTML qualifies it as a
kind of rich Internet application (RIA). As email correspondents and
bloggers pointed out, the technique has a fairly long history. Many
many wonder why it remains on the fringe. The reason, I think, is
partly a weakness common to all RIA technologies. Whether it's based
on DHTML, Java, Flash, .NET, or just a standard GUI, an RIA has a
client/server architecture. Unlike a Web application which manages
state information almost entirely on the server, though, an RIA
achieves a more balanced distribution of that information between
client and server. The benefits that flow from this arrangement can
include responsiveness, context preservation, and offline capability.
To achieve these benefits, though, we have to make some painful
tradeoffs.
<br/><br/><b>...</b><br/><br/>
 RIAs are protocol-driven. A programmer
who masters an application's protocols can extend it or combine it
with other applications. But there are no integration hooks available
to the user. In a Web application, those hooks are simply URLs.
Consider what happens when you include a MapQuest URL in an email to
someone. A piece of state information -- namely, the state of the
MapQuest viewer when displaying a given location -- has been reduced
to a token that one person can hand to another. The same thing can
usefully apply to the state of a shopping cart, or an airline
reservation.
<br/><br/><b>...</b><br/><br/>
The idea that an application wears its state information on its
sleeve, readily available for users to bookmark, modify, and trade, is
an underappreciated strength of Web-based software. As the RIA
bandwagon picks up steam, let's honor that idea and find a way to move
it forward. [Full story at <a href="http://www.infoworld.com/article/04/11/05/45OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
</p>
<p>
Over the past few weeks I've discussed this idea with folks at Macromedia and Laszlo. It's related to what Adam Bosworth has been saying recently:
<blockquote class="personQuote AdamBosworth">
The customers are, very literally, in control. Think of it as democracy versus totalitarianism. This last point showed up almost from day one in the web. The user interface customized itself to the users needs, location, and data in a dynamic way through the magic of dynamic page layout. Today, a full ten years later, most windows apps still don't do that. But heck they are only 2 or 3 or 4 generations evolved. Services, in the last decade, may have evolved 600 times by now all in reaction to what they have learned directly from customer use. [<a href="http://www.adambosworth.net/archives/000028.html">Adam Bosworth</a>]
</blockquote> 
When Adam says "the user interface customizes itself," his language obscures a key point. Who does the customizing -- the developer or the user? I think the answer has to be: both. The web's rapid evolution is not merely the explosive result of zero-install dynamics. REST pours fuel on the fire. The web's architecture is compositional. When you expose application state on the URL-line, to the maximum degree possible, users and developers become co-composers.
</p>
<p>
Flash needs to figure out how to enable this collaboration, fundamentally and pervasively. Likewise DHTML. Likewise Java, .NET, and all the first-generation GUIs.
</p>

			</body>
			<dc:date>2004-11-09T09:14:14-05:00</dc:date>
			</item>
		<item>
			<title>Introduction to MSH</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/11/02.html#a1106</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
System administration has always been Windows&apos; Achilles&apos; heel. The graphical tools that simplify basic chores just get in the way when there&apos;s heavy lifting to be done. And CMD.EXE, the hapless command shell, pales in comparison to the Unix shells that inspired it. Win32 Perl has been my ace in the hole, combining a powerful scripting language with extensions that can wield Windows&apos; directory, registry, event log, and COM services. But I&apos;ve always thought there should be a better way.
&lt;br/&gt;&lt;br/&gt;
Jeffrey Snover thought so, too. He&apos;s the architect of Monad, aka MSH (Microsoft Shell), the radical new Windows command shell first shown at the Professional Developers Conference last fall.
&lt;br/&gt;&lt;br/&gt;...&lt;br/&gt;&lt;br/&gt;
MSH is quirky, complex, delightful, and utterly addictive. You can, for example, convert objects to and from XML so that programs that don&apos;t natively speak .Net can have a crack at them. There&apos;s SQL-like sorting and grouping. You write ad hoc extensions in a built-in scripting language that feels vaguely Perlish. For more permanent extensions, called cmdlets, you use .Net languages.
&lt;br/&gt;&lt;br/&gt;
With MSH, Windows system administration manages to be both fun and productive. And the story will only improve as the .Net Framework continues to enfold Windows&apos; management APIs. Competitors take note: Windows is about to convert one of its great weaknesses into a strength. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/10/29/44OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
System administration has always been Windows&apos; Achilles&apos; heel. The graphical tools that simplify basic chores just get in the way when there&apos;s heavy lifting to be done. And CMD.EXE, the hapless command shell, pales in comparison to the Unix shells that inspired it. Win32 Perl has been my ace in the hole, combining a powerful scripting language with extensions that can wield Windows&apos; directory, registry, event log, and COM services. But I&apos;ve always thought there should be a better way.
&lt;br/&gt;&lt;br/&gt;
Jeffrey Snover thought so, too. He&apos;s the architect of Monad, aka MSH (Microsoft Shell), the radical new Windows command shell first shown at the Professional Developers Conference last fall.
&lt;br/&gt;&lt;br/&gt;...&lt;br/&gt;&lt;br/&gt;
MSH is quirky, complex, delightful, and utterly addictive. You can, for example, convert objects to and from XML so that programs that don&apos;t natively speak .Net can have a crack at them. There&apos;s SQL-like sorting and grouping. You write ad hoc extensions in a built-in scripting language that feels vaguely Perlish. For more permanent extensions, called cmdlets, you use .Net languages.
&lt;br/&gt;&lt;br/&gt;
With MSH, Windows system administration manages to be both fun and productive. And the story will only improve as the .Net Framework continues to enfold Windows&apos; management APIs. Competitors take note: Windows is about to convert one of its great weaknesses into a strength. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/10/29/44OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
Here&apos;s a sequence of examples to give you a bit of the flavor of MSH. First, a raw process dump:
&lt;/p&gt;
&lt;pre class=&quot;code msh&quot;&gt;
MSH&gt; get-process
 
Handles  NPM(K)    PM(K)      WS(K) VS(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
    105       5     1224         88    32     0.11   1956 alg
     41       2      816        180    23     0.09   1340 aspnet_admin
     69       3     2336         68    36     0.86    760 cmd
     35       2      860        148    27     0.23   1352 Crypserv
    539       6     1868       2312    27    44.89    556 csrss
    100       5      960       1308    29     1.30   1252 ctfmon
 
...etc...
&lt;/pre&gt;
&lt;p&gt;
The console output doesn&apos;t show everything that&apos;s in the returned set of &lt;a href=&quot;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfSystemDiagnosticsProcessPropertiesTopic.asp&quot;&gt;System.Diagnostics.Process&lt;/a&gt; objects, but here&apos;s one way to see more:
&lt;/p&gt;
&lt;pre class=&quot;code msh&quot;&gt;
MSH&gt; get-process | get-member -p
 
Class       Name                      MemberData
-----       ----                      ----------
Property    __NounName                System.String
Property    BasePriority              System.Int32
Property    Company                   System.Management.Automation.MshObject
Property    Container
Property    CPU                       System.Management.Automation.MshObject
Property    Description               System.Management.Automation.MshObject
 
...etc...
&lt;/pre&gt;
&lt;p&gt;
Alternatively:
&lt;/p&gt;
&lt;pre class=&quot;code msh&quot;&gt;
MSH&gt; get-process | out-grid
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://weblog.infoworld.com/udell/gems/msh01.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;
Or:
&lt;/p&gt;
&lt;pre class=&quot;code msh&quot;&gt;
MSH&gt; get-process | out-excel
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://weblog.infoworld.com/udell/gems/msh02.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;
Here are processes using more than 15MB of virtual memory:
&lt;/p&gt;
&lt;pre class=&quot;code msh&quot;&gt;
MSH&gt; get-process | where { $_.virtualmemorysize -gt 150000000}
 
Handles  NPM(K)    PM(K)      WS(K) VS(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
   2411      89    74680      42572   211 1,176.00    396 firefox
    395      11    32720      14848   272    79.89   3504 msh
    484      18    30180      16012   235   337.41   2068 OUTLOOK
    398      16    19172       1220   173    12.33   3636 WINWORD
&lt;/pre&gt;
&lt;p&gt;
Grouped by vendor:
&lt;/p&gt;
&lt;pre class=&quot;code msh&quot;&gt;
MSH&gt; get-process | where { $_.vs -gt 150000000} | group-object company
 
Count Name                      Group
----- ----                      -----
    1 Mozilla                   {firefox}
    1 -                         {msh}
    2 Microsoft Corporation     {OUTLOOK, WINWORD}
&lt;/pre&gt;
&lt;p&gt;
Just selected properties:
&lt;/p&gt;
&lt;pre class=&quot;code msh&quot;&gt;
MSH&gt; get-process | where { $_.vs -gt 150000000} | pick-object name, path, id, vs
  
name                 path                                 id                  vs
----                 ----                                 --                  --
firefox              C:\firefox.09\fi...                 396           220983296
msh                  C:\Program Files...                3504           285908992
OUTLOOK              C:\PROGRA~1\MICR...                2068           245936128
WINWORD              C:\Program Files...                3636           181805056
&lt;/pre&gt;
&lt;p&gt;
Ordered by virtual memory size:
&lt;/p&gt;
&lt;pre class=&quot;code msh&quot;&gt;
MSH&gt; get-process | where { $_.vs -gt 150000000} | pick-object name, path, id, vs |
sort-object vs -d
  
name                 path                                 id                  vs
----                 ----                                 --                  --
msh                  C:\Program Files...                3504           285908992
OUTLOOK              C:\PROGRA~1\MICR...                2068           245936128
firefox              C:\firefox.09\fi...                 396           220983296
WINWORD              C:\Program Files...                3636           181805056
&lt;/pre&gt;
&lt;p&gt;
Results assigned to a variable:
&lt;/p&gt;
&lt;pre class=&quot;code msh&quot;&gt;
MSH&gt; $v = get-process | where { $_.vs -gt 150000000} | pick-object name, path, id, vs |
sort-object vs -d
 
MSH&gt; $v
 
name                 path                                 id                  vs
----                 ----                                 --                  --
msh                  C:\Program Files...                3504           285908992
OUTLOOK              C:\PROGRA~1\MICR...                2068           245936128
firefox              C:\firefox.09\fi...                 396           220983296
WINWORD              C:\Program Files...                3636           181805056
 
MSH&gt; $v[0].id
 
3504
&lt;/pre&gt;
&lt;p&gt;
Results as XML:
&lt;/p&gt;
&lt;pre class=&quot;code msh&quot;&gt;
MSH&gt; get-process | pick-object name,vs | where { $_.vs -gt 150000000} | convert-xml
 
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot; standalone=&quot;yes&quot;?&gt;
&amp;lt;MshObjects xmlns=&quot;http://msh&quot;&gt;
  &amp;lt;MshObject ReferenceID=&quot;ReferenceId-0&quot; Version=&quot;1.1&quot; 
          xmlns=&quot;http://schemas.microsoft.com/msh/2004/04&quot;&gt;
    &amp;lt;MemberSet&gt;
      &amp;lt;Note Name=&quot;name&quot; IsHidden=&quot;false&quot; IsInstance=&quot;true&quot; IsSettable=&quot;true&quot;&gt;
        &amp;lt;string&gt;firefox&amp;lt;/string&gt;
      &amp;lt;/Note&gt;
      &amp;lt;Note Name=&quot;vs&quot; IsHidden=&quot;false&quot; IsInstance=&quot;true&quot; IsSettable=&quot;true&quot;&gt;
        &amp;lt;int&gt;220983296&amp;lt;/int&gt;
      &amp;lt;/Note&gt;
    &amp;lt;/MemberSet&gt;
  &amp;lt;/MshObject&gt;
 
...etc...
&lt;/pre&gt;
&lt;p&gt;
Preview a request to kill processes using more than 20MB of virtual memory:
&lt;/p&gt;
&lt;pre class=&quot;code msh&quot;&gt;
MSH&gt; get-process | where { $_.vs -gt 200000000} | stop-process -whatif
# stop-process on firefox (Mozilla Firefox)
# stop-process on msh (Windows command shell preview)
# stop-process on OUTLOOK (Inbox - Microsoft Outlook)
&lt;/pre&gt;

</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
System administration has always been Windows' Achilles' heel. The graphical tools that simplify basic chores just get in the way when there's heavy lifting to be done. And CMD.EXE, the hapless command shell, pales in comparison to the Unix shells that inspired it. Win32 Perl has been my ace in the hole, combining a powerful scripting language with extensions that can wield Windows' directory, registry, event log, and COM services. But I've always thought there should be a better way.
<br/><br/>
Jeffrey Snover thought so, too. He's the architect of Monad, aka MSH (Microsoft Shell), the radical new Windows command shell first shown at the Professional Developers Conference last fall.
<br/><br/>...<br/><br/>
MSH is quirky, complex, delightful, and utterly addictive. You can, for example, convert objects to and from XML so that programs that don't natively speak .Net can have a crack at them. There's SQL-like sorting and grouping. You write ad hoc extensions in a built-in scripting language that feels vaguely Perlish. For more permanent extensions, called cmdlets, you use .Net languages.
<br/><br/>
With MSH, Windows system administration manages to be both fun and productive. And the story will only improve as the .Net Framework continues to enfold Windows' management APIs. Competitors take note: Windows is about to convert one of its great weaknesses into a strength. [Full story at <a href="http://www.infoworld.com/article/04/10/29/44OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
</p>
<p>
Here's a sequence of examples to give you a bit of the flavor of MSH. First, a raw process dump:
</p>
<pre class="code msh">
MSH> get-process
 
Handles  NPM(K)    PM(K)      WS(K) VS(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
    105       5     1224         88    32     0.11   1956 alg
     41       2      816        180    23     0.09   1340 aspnet_admin
     69       3     2336         68    36     0.86    760 cmd
     35       2      860        148    27     0.23   1352 Crypserv
    539       6     1868       2312    27    44.89    556 csrss
    100       5      960       1308    29     1.30   1252 ctfmon
 
...etc...
</pre>
<p>
The console output doesn't show everything that's in the returned set of <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfSystemDiagnosticsProcessPropertiesTopic.asp">System.Diagnostics.Process</a> objects, but here's one way to see more:
</p>
<pre class="code msh">
MSH> get-process | get-member -p
 
Class       Name                      MemberData
-----       ----                      ----------
Property    __NounName                System.String
Property    BasePriority              System.Int32
Property    Company                   System.Management.Automation.MshObject
Property    Container
Property    CPU                       System.Management.Automation.MshObject
Property    Description               System.Management.Automation.MshObject
 
...etc...
</pre>
<p>
Alternatively:
</p>
<pre class="code msh">
MSH> get-process | out-grid
</pre>
<p><img src="http://weblog.infoworld.com/udell/gems/msh01.jpg"/></p>
<p>
Or:
</p>
<pre class="code msh">
MSH> get-process | out-excel
</pre>
<p><img src="http://weblog.infoworld.com/udell/gems/msh02.jpg"/></p>
<p>
Here are processes using more than 15MB of virtual memory:
</p>
<pre class="code msh">
MSH> get-process | where { $_.virtualmemorysize -gt 150000000}
 
Handles  NPM(K)    PM(K)      WS(K) VS(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
   2411      89    74680      42572   211 1,176.00    396 firefox
    395      11    32720      14848   272    79.89   3504 msh
    484      18    30180      16012   235   337.41   2068 OUTLOOK
    398      16    19172       1220   173    12.33   3636 WINWORD
</pre>
<p>
Grouped by vendor:
</p>
<pre class="code msh">
MSH> get-process | where { $_.vs -gt 150000000} | group-object company
 
Count Name                      Group
----- ----                      -----
    1 Mozilla                   {firefox}
    1 -                         {msh}
    2 Microsoft Corporation     {OUTLOOK, WINWORD}
</pre>
<p>
Just selected properties:
</p>
<pre class="code msh">
MSH> get-process | where { $_.vs -gt 150000000} | pick-object name, path, id, vs
  
name                 path                                 id                  vs
----                 ----                                 --                  --
firefox              C:\\firefox.09\\fi...                 396           220983296
msh                  C:\\Program Files...                3504           285908992
OUTLOOK              C:\\PROGRA~1\\MICR...                2068           245936128
WINWORD              C:\\Program Files...                3636           181805056
</pre>
<p>
Ordered by virtual memory size:
</p>
<pre class="code msh">
MSH> get-process | where { $_.vs -gt 150000000} | pick-object name, path, id, vs |
sort-object vs -d
  
name                 path                                 id                  vs
----                 ----                                 --                  --
msh                  C:\\Program Files...                3504           285908992
OUTLOOK              C:\\PROGRA~1\\MICR...                2068           245936128
firefox              C:\\firefox.09\\fi...                 396           220983296
WINWORD              C:\\Program Files...                3636           181805056
</pre>
<p>
Results assigned to a variable:
</p>
<pre class="code msh">
MSH> $v = get-process | where { $_.vs -gt 150000000} | pick-object name, path, id, vs |
sort-object vs -d
 
MSH> $v
 
name                 path                                 id                  vs
----                 ----                                 --                  --
msh                  C:\\Program Files...                3504           285908992
OUTLOOK              C:\\PROGRA~1\\MICR...                2068           245936128
firefox              C:\\firefox.09\\fi...                 396           220983296
WINWORD              C:\\Program Files...                3636           181805056
 
MSH> $v[0].id
 
3504
</pre>
<p>
Results as XML:
</p>
<pre class="code msh">
MSH> get-process | pick-object name,vs | where { $_.vs -gt 150000000} | convert-xml
 
&lt;?xml version="1.0" encoding="utf-16" standalone="yes"?>
&lt;MshObjects xmlns="http://msh">
  &lt;MshObject ReferenceID="ReferenceId-0" Version="1.1" 
          xmlns="http://schemas.microsoft.com/msh/2004/04">
    &lt;MemberSet>
      &lt;Note Name="name" IsHidden="false" IsInstance="true" IsSettable="true">
        &lt;string>firefox&lt;/string>
      &lt;/Note>
      &lt;Note Name="vs" IsHidden="false" IsInstance="true" IsSettable="true">
        &lt;int>220983296&lt;/int>
      &lt;/Note>
    &lt;/MemberSet>
  &lt;/MshObject>
 
...etc...
</pre>
<p>
Preview a request to kill processes using more than 20MB of virtual memory:
</p>
<pre class="code msh">
MSH> get-process | where { $_.vs -gt 200000000} | stop-process -whatif
# stop-process on firefox (Mozilla Firefox)
# stop-process on msh (Windows command shell preview)
# stop-process on OUTLOOK (Inbox - Microsoft Outlook)
</pre>


			</body>
			<dc:date>2004-11-02T11:09:37-05:00</dc:date>
			</item>
		<item>
			<title>New directions in source code analysis</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/11/01.html#a1105</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
Large-scale software systems are staggeringly complex works of engineering. Bugs inevitably come with the territory and for decades, the software profession has looked for ways to fight them. We may not see perfect source code in our lifetime, but we are seeing much better analysis tools and promising new approaches to remedy the problem.
&lt;br/&gt;&lt;br/&gt;
TDD (test-driven development) is one increasingly popular approach to finding bugs. The overhead can be substantial, however, because the test framework that ensures a program&apos;s correctness may require as many lines of code as the program itself. Run-time checking is another popular approach. By injecting special instrumentation into programs or by intercepting API calls, tools such as IBM&apos;s Rational Purify and Compuware&apos;s BoundsChecker can find problems such as memory corruption, resource leakage, and incorrect use of operating system services. TDD and run-time checking are both useful techniques and are complementary. But ultimately, all errors reside in the program&apos;s source code. Although it&apos;s always important for programmers to review their own code (and one another&apos;s), comprehensive analysis demands automation.
&lt;br/&gt;&lt;br/&gt;
One compelling demonstration of the power of automated source code analysis is Coverity&apos;s Linux bugs database. Viewable online, this April 2004 snapshot pinpointed hundreds of bugs in the Linux 2.6 source code. Coverity&apos;s analyzer, called SWAT (Software Analysis Toolset), grew out of research by Stanford professor Dawson Engler, now on leave as Coverity&apos;s chief scientist.
&lt;br/&gt;&lt;br/&gt;
In the Windows world, a static source code analyzer called PREfast, which has been used internally at Microsoft for years, will be included in Microsoft Visual Studio 2005 Team System. PREfast is a streamlined version of a powerful analyzer called PREfix, a commercial product sold in the late 1990s by a company called Intrinsa. Microsoft acquired Intrinsa in 1999 and brought the technology into its Programmer Productivity Research Center. Full story at [&lt;a href=&quot;http://www.infoworld.com/article/04/10/29/44FEsource_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
Large-scale software systems are staggeringly complex works of engineering. Bugs inevitably come with the territory and for decades, the software profession has looked for ways to fight them. We may not see perfect source code in our lifetime, but we are seeing much better analysis tools and promising new approaches to remedy the problem.
&lt;br/&gt;&lt;br/&gt;
TDD (test-driven development) is one increasingly popular approach to finding bugs. The overhead can be substantial, however, because the test framework that ensures a program&apos;s correctness may require as many lines of code as the program itself. Run-time checking is another popular approach. By injecting special instrumentation into programs or by intercepting API calls, tools such as IBM&apos;s Rational Purify and Compuware&apos;s BoundsChecker can find problems such as memory corruption, resource leakage, and incorrect use of operating system services. TDD and run-time checking are both useful techniques and are complementary. But ultimately, all errors reside in the program&apos;s source code. Although it&apos;s always important for programmers to review their own code (and one another&apos;s), comprehensive analysis demands automation.
&lt;br/&gt;&lt;br/&gt;
One compelling demonstration of the power of automated source code analysis is Coverity&apos;s Linux bugs database. Viewable online, this April 2004 snapshot pinpointed hundreds of bugs in the Linux 2.6 source code. Coverity&apos;s analyzer, called SWAT (Software Analysis Toolset), grew out of research by Stanford professor Dawson Engler, now on leave as Coverity&apos;s chief scientist.
&lt;br/&gt;&lt;br/&gt;
In the Windows world, a static source code analyzer called PREfast, which has been used internally at Microsoft for years, will be included in Microsoft Visual Studio 2005 Team System. PREfast is a streamlined version of a powerful analyzer called PREfix, a commercial product sold in the late 1990s by a company called Intrinsa. Microsoft acquired Intrinsa in 1999 and brought the technology into its Programmer Productivity Research Center. Full story at [&lt;a href=&quot;http://www.infoworld.com/article/04/10/29/44FEsource_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
For more background on this story, see &lt;a href=&quot;http://del.icio.us/judell/sourcecodeanalysis&quot;&gt;this set of links&lt;/a&gt; I posted to del.icio.us. Although I haven&apos;t drawn attention to it until now, this is another aspect of my ongoing quest to bring more transparency and accountability to journalism -- or anyway, to the little corner of the journalistic world that I inhabit when I&apos;m wearing my journalistic hat. 
&lt;/p&gt;
&lt;p&gt;
Elsewhere I&apos;ve outlined my general approach to &lt;a href=&quot;http://weblog.infoworld.com/udell/2004/03/22.html#a950&quot;&gt;blog/print synergy&lt;/a&gt;. Social bookmarking is a natural complement  to that set of strategies. Here are some of the outcomes I foresee:
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Passive amplification.&lt;/b&gt;
By &quot;amplification&quot; I mean using the Net to amplify the effects of my research efforts. Such amplification can occur, for example, when I navigate from &lt;a href=&quot;http://del.icio.us/judell/sourcecodeanalysis&quot;&gt;my set of &lt;b&gt;sourcecodeanalysis&lt;/b&gt; links&lt;/a&gt; to &lt;a href=&quot;http://del.icio.us/tag/sourcecodeanalysis&quot;&gt;everyone&apos;s &lt;b&gt;sourcecodeanalysis&lt;/b&gt; links&lt;/a&gt;. Of course if nobody else is using that tag, as is currently true in this case, then those two sets are identical and I&apos;ve gained no wider view of the subject. 
&lt;/p&gt;
&lt;p&gt;
Recently, though, del.icio.us has added a related-tag feature. So for example I can navigate from &lt;a href=&quot;http://del.icio.us/judell/sourcecodeanalysis&quot;&gt;judell/sourcecodeanalysis&lt;/a&gt; to &lt;a href=&quot;http://del.icio.us/rickduarte/codeanalysis&quot;&gt;rickduarte/codeanalysis&lt;/a&gt; -- where I&apos;ll find &lt;a href=&quot;http://del.icio.us/url/d52ece65e690e797503c99ea67e7d7ab&quot;&gt;some&lt;/a&gt; &lt;a href=&quot;http://del.icio.us/url/8b6594011db524a6f8d9b601fbb4cab0&quot;&gt;overlapping&lt;/a&gt; &lt;a href=&quot;http://del.icio.us/url/49973164448f29928cfceffdf393e9fb&quot;&gt;links&lt;/a&gt; but also &lt;a href=&quot;http://www.onjava.com/pub/a/onjava/2004/06/16/ccunittest.html?page=2&quot;&gt;some&lt;/a&gt; &lt;a href=&quot;http://dotnetjunkies.com/WebLog/jhaley/archive/2004/08/14/22060.aspx&quot;&gt;new&lt;/a&gt; &lt;a href=&quot;http://blog.colorstudy.com/ianb/weblog/2004/08/10.html&quot;&gt;ones&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Active amplification.&lt;/b&gt;
Passive amplification flows automatically from posting research links in a public place where a correlation engine, such as del.icio.us, can work on them. Active amplification is a new concept I haven&apos;t actually tried yet. Here&apos;s how it would work. Consider, for example, the &lt;a href=&quot;http://del.icio.us/judell/mssecurity&quot;&gt;reading list&lt;/a&gt; I accumulated for a recent feature article on &lt;a href=&quot;http://weblog.infoworld.com/udell/2004/10/12.html#a1093&quot;&gt;Microsoft security&lt;/a&gt;. Because this story was posted on the editorial calendar, I was flooded with email from public relation folk hoping to inject their clients&apos; perspectives into the story. What if I ask people -- and not just PR folk, but anyone with a perspective that ought to be considered -- to route links to a del.icio.us tag that I&apos;ll preannounce? 
&lt;/p&gt;
&lt;p&gt;
I&apos;ve already established the prececent of blogging, in advance, the key points I see as relevant to a story in progress, and inviting the story&apos;s constituency to help me refine that agenda. The idea here would be to extend that collaborative process to the development of the story&apos;s background reading list.
&lt;/p&gt;
&lt;p&gt;
As with all schemes involving a world-writable database, this one will be inherently spammable. But the two-tier arrangement -- everyone&apos;s links versus my links -- affords some control. 
&lt;/p&gt;
&lt;p&gt;
Here&apos;s the protocol I envision:
&lt;blockquote&gt;
For a story on TOPIC, I&apos;m collecting links at del.icio.us/judell/TOPIC. To monitor that evolving collection, subscribe to del.icio.us/rss/judell/TOPIC. If you would like to suggest links I&apos;ve missed, please post them to del.icio.us/YOURNAME/TOPIC. I guarantee that I&apos;ll monitor the aggregation of contributed links at del.icio.us/rss/tag/TOPIC. I don&apos;t guarantee a response to follow-up email requests. If I judge an item you&apos;ve posted to be significant, however, you&apos;ll see it show up at del.icio.us/judell/TOPIC.
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
Interesting, eh? Next time I write a big feature story I&apos;ll give this a try, and we&apos;ll see whether theory translates into practice.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
Large-scale software systems are staggeringly complex works of engineering. Bugs inevitably come with the territory and for decades, the software profession has looked for ways to fight them. We may not see perfect source code in our lifetime, but we are seeing much better analysis tools and promising new approaches to remedy the problem.
<br/><br/>
TDD (test-driven development) is one increasingly popular approach to finding bugs. The overhead can be substantial, however, because the test framework that ensures a program's correctness may require as many lines of code as the program itself. Run-time checking is another popular approach. By injecting special instrumentation into programs or by intercepting API calls, tools such as IBM's Rational Purify and Compuware's BoundsChecker can find problems such as memory corruption, resource leakage, and incorrect use of operating system services. TDD and run-time checking are both useful techniques and are complementary. But ultimately, all errors reside in the program's source code. Although it's always important for programmers to review their own code (and one another's), comprehensive analysis demands automation.
<br/><br/>
One compelling demonstration of the power of automated source code analysis is Coverity's Linux bugs database. Viewable online, this April 2004 snapshot pinpointed hundreds of bugs in the Linux 2.6 source code. Coverity's analyzer, called SWAT (Software Analysis Toolset), grew out of research by Stanford professor Dawson Engler, now on leave as Coverity's chief scientist.
<br/><br/>
In the Windows world, a static source code analyzer called PREfast, which has been used internally at Microsoft for years, will be included in Microsoft Visual Studio 2005 Team System. PREfast is a streamlined version of a powerful analyzer called PREfix, a commercial product sold in the late 1990s by a company called Intrinsa. Microsoft acquired Intrinsa in 1999 and brought the technology into its Programmer Productivity Research Center. Full story at [<a href="http://www.infoworld.com/article/04/10/29/44FEsource_1.html">InfoWorld.com</a>]
</blockquote>
</p>
<p>
For more background on this story, see <a href="http://del.icio.us/judell/sourcecodeanalysis">this set of links</a> I posted to del.icio.us. Although I haven't drawn attention to it until now, this is another aspect of my ongoing quest to bring more transparency and accountability to journalism -- or anyway, to the little corner of the journalistic world that I inhabit when I'm wearing my journalistic hat. 
</p>
<p>
Elsewhere I've outlined my general approach to <a href="http://weblog.infoworld.com/udell/2004/03/22.html#a950">blog/print synergy</a>. Social bookmarking is a natural complement  to that set of strategies. Here are some of the outcomes I foresee:
</p>
<p>
<b>Passive amplification.</b>
By "amplification" I mean using the Net to amplify the effects of my research efforts. Such amplification can occur, for example, when I navigate from <a href="http://del.icio.us/judell/sourcecodeanalysis">my set of <b>sourcecodeanalysis</b> links</a> to <a href="http://del.icio.us/tag/sourcecodeanalysis">everyone's <b>sourcecodeanalysis</b> links</a>. Of course if nobody else is using that tag, as is currently true in this case, then those two sets are identical and I've gained no wider view of the subject. 
</p>
<p>
Recently, though, del.icio.us has added a related-tag feature. So for example I can navigate from <a href="http://del.icio.us/judell/sourcecodeanalysis">judell/sourcecodeanalysis</a> to <a href="http://del.icio.us/rickduarte/codeanalysis">rickduarte/codeanalysis</a> -- where I'll find <a href="http://del.icio.us/url/d52ece65e690e797503c99ea67e7d7ab">some</a> <a href="http://del.icio.us/url/8b6594011db524a6f8d9b601fbb4cab0">overlapping</a> <a href="http://del.icio.us/url/49973164448f29928cfceffdf393e9fb">links</a> but also <a href="http://www.onjava.com/pub/a/onjava/2004/06/16/ccunittest.html?page=2">some</a> <a href="http://dotnetjunkies.com/WebLog/jhaley/archive/2004/08/14/22060.aspx">new</a> <a href="http://blog.colorstudy.com/ianb/weblog/2004/08/10.html">ones</a>.
</p>
<p><b>Active amplification.</b>
Passive amplification flows automatically from posting research links in a public place where a correlation engine, such as del.icio.us, can work on them. Active amplification is a new concept I haven't actually tried yet. Here's how it would work. Consider, for example, the <a href="http://del.icio.us/judell/mssecurity">reading list</a> I accumulated for a recent feature article on <a href="http://weblog.infoworld.com/udell/2004/10/12.html#a1093">Microsoft security</a>. Because this story was posted on the editorial calendar, I was flooded with email from public relation folk hoping to inject their clients' perspectives into the story. What if I ask people -- and not just PR folk, but anyone with a perspective that ought to be considered -- to route links to a del.icio.us tag that I'll preannounce? 
</p>
<p>
I've already established the prececent of blogging, in advance, the key points I see as relevant to a story in progress, and inviting the story's constituency to help me refine that agenda. The idea here would be to extend that collaborative process to the development of the story's background reading list.
</p>
<p>
As with all schemes involving a world-writable database, this one will be inherently spammable. But the two-tier arrangement -- everyone's links versus my links -- affords some control. 
</p>
<p>
Here's the protocol I envision:
<blockquote>
For a story on TOPIC, I'm collecting links at del.icio.us/judell/TOPIC. To monitor that evolving collection, subscribe to del.icio.us/rss/judell/TOPIC. If you would like to suggest links I've missed, please post them to del.icio.us/YOURNAME/TOPIC. I guarantee that I'll monitor the aggregation of contributed links at del.icio.us/rss/tag/TOPIC. I don't guarantee a response to follow-up email requests. If I judge an item you've posted to be significant, however, you'll see it show up at del.icio.us/judell/TOPIC.
</blockquote>
</p>
<p>
Interesting, eh? Next time I write a big feature story I'll give this a try, and we'll see whether theory translates into practice.
</p>

			</body>
			<dc:date>2004-11-01T11:00:23-05:00</dc:date>
			</item>
		<item>
			<title>Under Gmail's hood</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/10/26.html#a1102</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
I&apos;d been experimenting for a few months with Gmail, Google&apos;s Web mail system, without really taking it seriously. But this week I decided to take the plunge and try using Gmail not only as a mail search engine, but as a replacement for Outlook (on Windows) and Mail (on OS X). Now I&apos;m ready to join the chorus singing the praises of GMail&apos;s user-interface technology. Its combination of HTML, JavaScript, and the DOM makes the browser do some remarkable tricks.
&lt;br/&gt;...&lt;br/&gt;
As early adopters discovered long before I did, there&apos;s an architecture behind this JavaScript/DHTML wizardry. The best description I&apos;ve found is from Johnvey Hwang, who deconstructed Gmail&apos;s JavaScript code and created a .Net-based Gmail API. As Hwang described in his July 5 write-up, Gmail loads a JavaScript &lt;i&gt;UI engine&lt;/i&gt; into your browser at the beginning of each session. Oddpost, he noted, was the first Web mail application to perfect this technique. That was a prophetic statement: Just four days later, on July 9, Yahoo acquired Oddpost.
&lt;br/&gt;&lt;br/&gt;
Because Gmail&apos;s behavior is embedded in the UI engine, all subsequent interaction between the browser and the Gmail service is just an exchange of data. What Hwang calls the DataPack format is not XML, though; it&apos;s JavaScript. When you make a request to the Gmail service, whether to refresh your inbox or to modify the list of labels you can attach to messages, the response is a minimal set of JavaScript function calls and associated data objects that the engine uses to update the display. 
&lt;br/&gt;...&lt;br/&gt;
So is Gmail a rich Internet application? Sure. Although that label most often applies to Java, .Net, and Flash clients, Gmail shows that Web clients can join the club too. But crucially, Gmail&apos;s architecture is open to other kinds of rich clients, too. It doesn&apos;t have to be a zero-sum game. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/10/22/43OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
I&apos;d been experimenting for a few months with Gmail, Google&apos;s Web mail system, without really taking it seriously. But this week I decided to take the plunge and try using Gmail not only as a mail search engine, but as a replacement for Outlook (on Windows) and Mail (on OS X). Now I&apos;m ready to join the chorus singing the praises of GMail&apos;s user-interface technology. Its combination of HTML, JavaScript, and the DOM makes the browser do some remarkable tricks.
&lt;br/&gt;...&lt;br/&gt;
As early adopters discovered long before I did, there&apos;s an architecture behind this JavaScript/DHTML wizardry. The best description I&apos;ve found is from Johnvey Hwang, who deconstructed Gmail&apos;s JavaScript code and created a .Net-based Gmail API. As Hwang described in his July 5 write-up, Gmail loads a JavaScript &lt;i&gt;UI engine&lt;/i&gt; into your browser at the beginning of each session. Oddpost, he noted, was the first Web mail application to perfect this technique. That was a prophetic statement: Just four days later, on July 9, Yahoo acquired Oddpost.
&lt;br/&gt;&lt;br/&gt;
Because Gmail&apos;s behavior is embedded in the UI engine, all subsequent interaction between the browser and the Gmail service is just an exchange of data. What Hwang calls the DataPack format is not XML, though; it&apos;s JavaScript. When you make a request to the Gmail service, whether to refresh your inbox or to modify the list of labels you can attach to messages, the response is a minimal set of JavaScript function calls and associated data objects that the engine uses to update the display. 
&lt;br/&gt;...&lt;br/&gt;
So is Gmail a rich Internet application? Sure. Although that label most often applies to Java, .Net, and Flash clients, Gmail shows that Web clients can join the club too. But crucially, Gmail&apos;s architecture is open to other kinds of rich clients, too. It doesn&apos;t have to be a zero-sum game. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/10/22/43OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
There&apos;s been a fair bit of &lt;a href=&quot;http://www.bloglines.com/citations?url=http%3A//www.infoworld.com/article/04/10/22/43OPstrategic_1.html&quot;&gt;blog commentary&lt;/a&gt; about this column. I&apos;ve also received a number of emails, several noting that even an envelope-pushing Web UI such as Gmail&apos;s can be fruitfully enhanced with Java, .NET, or Flash.
&lt;/p&gt;
&lt;p&gt;
I couldn&apos;t agree more. This morning, while testing some new screen-recording tools, I cooked up a nice A/B comparison in the application domain of photo sharing. As a test, I made and viewed an album in two&lt;sup&gt;1&lt;/sup&gt;  different applications. &lt;a href=&quot;http://www.webshots.com/&quot;&gt;Webshots&lt;/a&gt; is a straight HTML/JavaScript app&lt;sup&gt;2&lt;/sup&gt;, and &lt;a href=&quot;http://www.flickr.com/&quot;&gt;Flickr&lt;/a&gt;&lt;sup&gt;3&lt;/sup&gt; is an HTML/Flash hybrid. 
&lt;/p&gt;
&lt;p&gt;
Here&apos;s the five-minute video: &lt;a href=&quot;http://weblog.infoworld.com/udell/gems/photoshare.html&quot;&gt;Flash, high-res, 30MB&lt;/a&gt;, &lt;a href=&quot;http://weblog.infoworld.com/udell/gems/photoshare2.swf&quot;&gt;Flash, low-res, 6MB&lt;/a&gt;, &lt;a href=&quot;http://weblog.infoworld.com/udell/gems/photoshare.mov&quot;&gt;QuickTime, high-res, 10MB&lt;/a&gt;&lt;sup&gt;4&lt;/sup&gt;
&lt;/p&gt;
&lt;p&gt;
I think you&apos;ll agree that Flickr&apos;s selective and strategic use of Flash is enlightening. So what&apos;s this got to do with Gmail and the future of Web UI? I suggest there&apos;s no one-size-fits-all solution. In many cases, what will make the most sense is a hybrid application that uses Web 1.0 for all it&apos;s worth, pushes the DHTML envelope, &lt;i&gt;and&lt;/i&gt; weaves in rich-client technology where it adds the most leverage. 
&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;
&lt;sup&gt;1&lt;/sup&gt; Webshots album &lt;a href=&quot;http://community.webshots.com/slideshow?ID=206174524&amp;amp;key=AprXYD&amp;amp;pos=0&quot;&gt;here&lt;/a&gt;, Flickr album &lt;a href=&quot;http://www.flickr.com/photos/jonudell/sets/27461/show/&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;sup&gt;2&lt;/sup&gt; Yes, I&apos;m aware that Webshots&apos; strong suit is its downloadable/installable photo management application. For my purposes here, though, I&apos;m just exploring what can be done through the Web and on the fly.
&lt;/p&gt;
&lt;p&gt;
&lt;sup&gt;3&lt;/sup&gt; Full disclosure: I know, and have &lt;a href=&quot;http://weblog.infoworld.com/udell/2004/08/03.html&quot;&gt;hung out with&lt;/a&gt;, some of the Flickr folks.
&lt;/p&gt;
&lt;p&gt;
&lt;sup&gt;4&lt;/sup&gt; I&apos;m still sorting out the tools situation here. Too many players, too many formats, too many moving parts.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
I'd been experimenting for a few months with Gmail, Google's Web mail system, without really taking it seriously. But this week I decided to take the plunge and try using Gmail not only as a mail search engine, but as a replacement for Outlook (on Windows) and Mail (on OS X). Now I'm ready to join the chorus singing the praises of GMail's user-interface technology. Its combination of HTML, JavaScript, and the DOM makes the browser do some remarkable tricks.
<br/>...<br/>
As early adopters discovered long before I did, there's an architecture behind this JavaScript/DHTML wizardry. The best description I've found is from Johnvey Hwang, who deconstructed Gmail's JavaScript code and created a .Net-based Gmail API. As Hwang described in his July 5 write-up, Gmail loads a JavaScript <i>UI engine</i> into your browser at the beginning of each session. Oddpost, he noted, was the first Web mail application to perfect this technique. That was a prophetic statement: Just four days later, on July 9, Yahoo acquired Oddpost.
<br/><br/>
Because Gmail's behavior is embedded in the UI engine, all subsequent interaction between the browser and the Gmail service is just an exchange of data. What Hwang calls the DataPack format is not XML, though; it's JavaScript. When you make a request to the Gmail service, whether to refresh your inbox or to modify the list of labels you can attach to messages, the response is a minimal set of JavaScript function calls and associated data objects that the engine uses to update the display. 
<br/>...<br/>
So is Gmail a rich Internet application? Sure. Although that label most often applies to Java, .Net, and Flash clients, Gmail shows that Web clients can join the club too. But crucially, Gmail's architecture is open to other kinds of rich clients, too. It doesn't have to be a zero-sum game. [Full story at <a href="http://www.infoworld.com/article/04/10/22/43OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
</p>
<p>
There's been a fair bit of <a href="http://www.bloglines.com/citations?url=http%3A//www.infoworld.com/article/04/10/22/43OPstrategic_1.html">blog commentary</a> about this column. I've also received a number of emails, several noting that even an envelope-pushing Web UI such as Gmail's can be fruitfully enhanced with Java, .NET, or Flash.
</p>
<p>
I couldn't agree more. This morning, while testing some new screen-recording tools, I cooked up a nice A/B comparison in the application domain of photo sharing. As a test, I made and viewed an album in two<sup>1</sup>  different applications. <a href="http://www.webshots.com/">Webshots</a> is a straight HTML/JavaScript app<sup>2</sup>, and <a href="http://www.flickr.com/">Flickr</a><sup>3</sup> is an HTML/Flash hybrid. 
</p>
<p>
Here's the five-minute video: <a href="http://weblog.infoworld.com/udell/gems/photoshare.html">Flash, high-res, 30MB</a>, <a href="http://weblog.infoworld.com/udell/gems/photoshare2.swf">Flash, low-res, 6MB</a>, <a href="http://weblog.infoworld.com/udell/gems/photoshare.mov">QuickTime, high-res, 10MB</a><sup>4</sup>
</p>
<p>
I think you'll agree that Flickr's selective and strategic use of Flash is enlightening. So what's this got to do with Gmail and the future of Web UI? I suggest there's no one-size-fits-all solution. In many cases, what will make the most sense is a hybrid application that uses Web 1.0 for all it's worth, pushes the DHTML envelope, <i>and</i> weaves in rich-client technology where it adds the most leverage. 
</p>
<hr/>
<p>
<sup>1</sup> Webshots album <a href="http://community.webshots.com/slideshow?ID=206174524&amp;key=AprXYD&amp;pos=0">here</a>, Flickr album <a href="http://www.flickr.com/photos/jonudell/sets/27461/show/">here</a>.
</p>
<p>
<sup>2</sup> Yes, I'm aware that Webshots' strong suit is its downloadable/installable photo management application. For my purposes here, though, I'm just exploring what can be done through the Web and on the fly.
</p>
<p>
<sup>3</sup> Full disclosure: I know, and have <a href="http://weblog.infoworld.com/udell/2004/08/03.html">hung out with</a>, some of the Flickr folks.
</p>
<p>
<sup>4</sup> I'm still sorting out the tools situation here. Too many players, too many formats, too many moving parts.
</p>

			</body>
			<dc:date>2004-10-26T16:03:27-05:00</dc:date>
			</item>
		<item>
			<title>The Wiki way</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/10/19.html#a1098</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
The users of a Wiki think of the
process as organic growth. Enterprise IT planners tend to regard it as
unstructured chaos.
They&apos;re both correct. JotSpot&apos;s aim is to harmonize these opposing
views by empowering users to create islands of structure
in their seas of unstructured data. The company&apos;s founders, Joe Kraus
and Graham Spencer (two members of the original Architext/Excite
team), showed me
&lt;a href=&quot;http://weblog.infoworld.com/udell/2004/10/06.html#a1090&quot;&gt;how this works&lt;/a&gt;. You write simple Wiki markup to define a form and to display data gathered through that form. When you need to add a new field later, just tack it on. Under the covers, it&apos;s all a collection of objects that render as pages and attributes that render as fields.
&lt;br/&gt;&lt;br/&gt;
Of course, there&apos;s no free lunch. You pay a price for this kind of flexibility. Systems based on alternative object-oriented styles of data management tend to lack standard query languages, programming interfaces, management tools, and well-defined techniques of schema evolution. These are real problems. But the solutions that address them don&apos;t adapt well to the niches where small teams live and work.
&lt;br/&gt;&lt;br/&gt;
An example of a system that is well-adapted to those niches is Lotus Notes. Although it has never meshed cleanly with conventional databases, it has nonetheless enabled programmers -- and quite a few power users -- to create software that deals with idiosyncrasies of data and social context. Internet pundit Clay Shirky calls this &quot;situated software.&quot; It&apos;s cheap and easy to build, it targets a specific group of people, and it achieves a degree of customization that is not otherwise economically feasible.
&lt;br/&gt;&lt;br/&gt;
I asked the JotSpot guys what will happen if Wiki applications become a maintenance challenge, as did many Notes applications before them. &quot;That&apos;s a good problem to have,&quot; Kraus said. I agree, up to a point. Messy organic growth is better than no growth, and object-style data makes good fertilizer. In the long run, though, we shouldn&apos;t have to make such difficult trade-offs. As object, relational, and XML disciplines converge, all I can say is: Hurry! [&lt;a href=&quot;http://www.infoworld.com/article/04/10/15/42OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
The users of a Wiki think of the
process as organic growth. Enterprise IT planners tend to regard it as
unstructured chaos.
They&apos;re both correct. JotSpot&apos;s aim is to harmonize these opposing
views by empowering users to create islands of structure
in their seas of unstructured data. The company&apos;s founders, Joe Kraus
and Graham Spencer (two members of the original Architext/Excite
team), showed me
&lt;a href=&quot;http://weblog.infoworld.com/udell/2004/10/06.html#a1090&quot;&gt;how this works&lt;/a&gt;. You write simple Wiki markup to define a form and to display data gathered through that form. When you need to add a new field later, just tack it on. Under the covers, it&apos;s all a collection of objects that render as pages and attributes that render as fields.
&lt;br/&gt;&lt;br/&gt;
Of course, there&apos;s no free lunch. You pay a price for this kind of flexibility. Systems based on alternative object-oriented styles of data management tend to lack standard query languages, programming interfaces, management tools, and well-defined techniques of schema evolution. These are real problems. But the solutions that address them don&apos;t adapt well to the niches where small teams live and work.
&lt;br/&gt;&lt;br/&gt;
An example of a system that is well-adapted to those niches is Lotus Notes. Although it has never meshed cleanly with conventional databases, it has nonetheless enabled programmers -- and quite a few power users -- to create software that deals with idiosyncrasies of data and social context. Internet pundit Clay Shirky calls this &quot;situated software.&quot; It&apos;s cheap and easy to build, it targets a specific group of people, and it achieves a degree of customization that is not otherwise economically feasible.
&lt;br/&gt;&lt;br/&gt;
I asked the JotSpot guys what will happen if Wiki applications become a maintenance challenge, as did many Notes applications before them. &quot;That&apos;s a good problem to have,&quot; Kraus said. I agree, up to a point. Messy organic growth is better than no growth, and object-style data makes good fertilizer. In the long run, though, we shouldn&apos;t have to make such difficult trade-offs. As object, relational, and XML disciplines converge, all I can say is: Hurry! [&lt;a href=&quot;http://www.infoworld.com/article/04/10/15/42OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
The Wiki lineage traces back to Ward Cunningham&apos;s original (and still active) &lt;a href=&quot;http://www.c2.com/cgi/wiki&quot;&gt;Portland Pattern Repository Wiki&lt;/a&gt;. Other Wikis I&apos;ve used over the years include:
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href=&quot;http://zwiki.org/&quot;&gt;ZWiki&lt;/a&gt;. A Zope-based (and therefore object-database-backed) Wiki. 
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href=&quot;http://twiki.org/&quot;&gt;TWiki&lt;/a&gt;. A popular choice on corporate intranets. As TWiki founder &lt;a href=&quot;http://twiki.org/cgi-bin/view/Main/PeterThoeny&quot;&gt;Peter Thoeny&lt;/a&gt; reminded me, TWiki&apos;s &lt;a href=&quot;http://twiki.org/cgi-bin/view/TWiki/TWikiForms&quot;&gt;forms capability&lt;/a&gt; predates JotSpot&apos;s. For a wonderful demonstration of the Wiki way, incidentally, look at &lt;a href=&quot;http://twiki.org/cgi-bin/view/Codev/JotSpot&quot;&gt;this page&lt;/a&gt;. The TWiki team compares JotSpot to TWiki; JotSpot CTO Graham Spencer acknowledges TWiki as an inspiration; Spencer makes factual corrections to the comparison; TWiki contributor Crawford Currie in turn acknowledges some of the heavy lifting done by the JotSpot team. How cool is that?
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href=&quot;http://www.socialtext.com/&quot;&gt;Socialtext&lt;/a&gt;. The first company to commercialize Wiki technology for the enterprise. (See &lt;a href=&quot;http://www.infoworld.com/article/04/03/26/13FEsocial_1.html&quot;&gt;The Social Enterprise&lt;/a&gt;.)
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
Wikis have come a long way, but an equally long road stretches ahead. I&apos;m convinced that creating and managing microcontent will be an important part of the journey. That&apos;s why I&apos;ve instrumented my blog so that you can, for example, &lt;a href=&quot;http://udell.infoworld.com:8000/?//blockquote[contains(./@class,%20&apos;WardCunningham&apos;)]&quot;&gt;find all the Ward Cunningham quotes&lt;/a&gt;, and why I find JotSpot&apos;s microcontent strategy so interesting. There are still some missing puzzle pieces. In particular, we need content editors and databases that enable people to live comfortably in the zone where documents meet data. Perhaps mainstream awareness of Wiki technology will help drive that convergence.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
The users of a Wiki think of the
process as organic growth. Enterprise IT planners tend to regard it as
unstructured chaos.
They're both correct. JotSpot's aim is to harmonize these opposing
views by empowering users to create islands of structure
in their seas of unstructured data. The company's founders, Joe Kraus
and Graham Spencer (two members of the original Architext/Excite
team), showed me
<a href="http://weblog.infoworld.com/udell/2004/10/06.html#a1090">how this works</a>. You write simple Wiki markup to define a form and to display data gathered through that form. When you need to add a new field later, just tack it on. Under the covers, it's all a collection of objects that render as pages and attributes that render as fields.
<br/><br/>
Of course, there's no free lunch. You pay a price for this kind of flexibility. Systems based on alternative object-oriented styles of data management tend to lack standard query languages, programming interfaces, management tools, and well-defined techniques of schema evolution. These are real problems. But the solutions that address them don't adapt well to the niches where small teams live and work.
<br/><br/>
An example of a system that is well-adapted to those niches is Lotus Notes. Although it has never meshed cleanly with conventional databases, it has nonetheless enabled programmers -- and quite a few power users -- to create software that deals with idiosyncrasies of data and social context. Internet pundit Clay Shirky calls this "situated software." It's cheap and easy to build, it targets a specific group of people, and it achieves a degree of customization that is not otherwise economically feasible.
<br/><br/>
I asked the JotSpot guys what will happen if Wiki applications become a maintenance challenge, as did many Notes applications before them. "That's a good problem to have," Kraus said. I agree, up to a point. Messy organic growth is better than no growth, and object-style data makes good fertilizer. In the long run, though, we shouldn't have to make such difficult trade-offs. As object, relational, and XML disciplines converge, all I can say is: Hurry! [<a href="http://www.infoworld.com/article/04/10/15/42OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
</p>
<p>
The Wiki lineage traces back to Ward Cunningham's original (and still active) <a href="http://www.c2.com/cgi/wiki">Portland Pattern Repository Wiki</a>. Other Wikis I've used over the years include:
<ul>
<li><p>
<a href="http://zwiki.org/">ZWiki</a>. A Zope-based (and therefore object-database-backed) Wiki. 
</p></li>
<li><p>
<a href="http://twiki.org/">TWiki</a>. A popular choice on corporate intranets. As TWiki founder <a href="http://twiki.org/cgi-bin/view/Main/PeterThoeny">Peter Thoeny</a> reminded me, TWiki's <a href="http://twiki.org/cgi-bin/view/TWiki/TWikiForms">forms capability</a> predates JotSpot's. For a wonderful demonstration of the Wiki way, incidentally, look at <a href="http://twiki.org/cgi-bin/view/Codev/JotSpot">this page</a>. The TWiki team compares JotSpot to TWiki; JotSpot CTO Graham Spencer acknowledges TWiki as an inspiration; Spencer makes factual corrections to the comparison; TWiki contributor Crawford Currie in turn acknowledges some of the heavy lifting done by the JotSpot team. How cool is that?
</p></li>
<li><p>
<a href="http://www.socialtext.com/">Socialtext</a>. The first company to commercialize Wiki technology for the enterprise. (See <a href="http://www.infoworld.com/article/04/03/26/13FEsocial_1.html">The Social Enterprise</a>.)
</p></li>
</ul>
</p>
<p>
Wikis have come a long way, but an equally long road stretches ahead. I'm convinced that creating and managing microcontent will be an important part of the journey. That's why I've instrumented my blog so that you can, for example, <a href="http://udell.infoworld.com:8000/?//blockquote[contains(./@class,%20'WardCunningham')]">find all the Ward Cunningham quotes</a>, and why I find JotSpot's microcontent strategy so interesting. There are still some missing puzzle pieces. In particular, we need content editors and databases that enable people to live comfortably in the zone where documents meet data. Perhaps mainstream awareness of Wiki technology will help drive that convergence.
</p>

			</body>
			<dc:date>2004-10-19T10:41:11-05:00</dc:date>
			</item>
		<item>
			<title>Securing Windows</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/10/12.html#a1093</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
Led by Michael Howard (among others), Microsoft has embarked on a serious program of reform and claims it is committed to implementing these best practices. The comprehensive effort begins, Howard says, with mandatory training. Within 60 days of hiring, every developer assigned to a product team is indoctrinated with the principles of what Microsoft calls its Security Development Lifecycle.
&lt;br/&gt;&lt;br/&gt;
&quot;The level of security expertise in the marketplace -- in the industry in general -- is abysmally low,&quot; Howard says. &quot;So we need to bridge that gap.&quot;
&lt;br/&gt;&lt;br/&gt;
Independent experts, including Schneier, Metzger, and Cooper, can&apos;t accurately gauge the extent or the effect of these reforms. But they all know people who work inside Microsoft, and they all relay anecdotal reports that there has been real change in the right direction. Could Microsoft&apos;s military discipline make it a leader rather than a follower in the quest for more secure software?
&lt;br/&gt;&lt;br/&gt;
Of course, even if Microsoft did everything right from now on, the sins of the past will be with us for many years to come -- and no one believes that Microsoft is doing everything right. The bottom line? We&apos;re in a world of hurt because of Microsoft&apos;s past practices. That pain can&apos;t and won&apos;t go away anytime soon. But some of the right medicines are finally being applied, the results are tangible, and there&apos;s a reason for Microsoft to stay the course.
&lt;br/&gt;&lt;br/&gt;
&quot;The problem has always been economic, not technical,&quot; Schneier says. &quot;It was never in Microsoft&apos;s economic interest to make its stuff secure.&quot;
&lt;br/&gt;&lt;br/&gt;
But now, as growing numbers of people abandon Internet Explorer for Mozilla Firefox and as organizations look to Linux and OpenOffice.org as alternatives to Microsoft&apos;s OS and productivity suite, the cost of insecure software is starting to be felt in Redmond. If that pressure keeps up, we&apos;ll all be safer. Eventually. [Full story at &lt;a href=&quot;http://www.infoworld.com/reports/41SRmssecure.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
Led by Michael Howard (among others), Microsoft has embarked on a serious program of reform and claims it is committed to implementing these best practices. The comprehensive effort begins, Howard says, with mandatory training. Within 60 days of hiring, every developer assigned to a product team is indoctrinated with the principles of what Microsoft calls its Security Development Lifecycle.
&lt;br/&gt;&lt;br/&gt;
&quot;The level of security expertise in the marketplace -- in the industry in general -- is abysmally low,&quot; Howard says. &quot;So we need to bridge that gap.&quot;
&lt;br/&gt;&lt;br/&gt;
Independent experts, including Schneier, Metzger, and Cooper, can&apos;t accurately gauge the extent or the effect of these reforms. But they all know people who work inside Microsoft, and they all relay anecdotal reports that there has been real change in the right direction. Could Microsoft&apos;s military discipline make it a leader rather than a follower in the quest for more secure software?
&lt;br/&gt;&lt;br/&gt;
Of course, even if Microsoft did everything right from now on, the sins of the past will be with us for many years to come -- and no one believes that Microsoft is doing everything right. The bottom line? We&apos;re in a world of hurt because of Microsoft&apos;s past practices. That pain can&apos;t and won&apos;t go away anytime soon. But some of the right medicines are finally being applied, the results are tangible, and there&apos;s a reason for Microsoft to stay the course.
&lt;br/&gt;&lt;br/&gt;
&quot;The problem has always been economic, not technical,&quot; Schneier says. &quot;It was never in Microsoft&apos;s economic interest to make its stuff secure.&quot;
&lt;br/&gt;&lt;br/&gt;
But now, as growing numbers of people abandon Internet Explorer for Mozilla Firefox and as organizations look to Linux and OpenOffice.org as alternatives to Microsoft&apos;s OS and productivity suite, the cost of insecure software is starting to be felt in Redmond. If that pressure keeps up, we&apos;ll all be safer. Eventually. [Full story at &lt;a href=&quot;http://www.infoworld.com/reports/41SRmssecure.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
Like religion and politics, security tends to defy rational discussion. Among open source advocates, for example, it&apos;s an article of faith that Microsoft is incapable of fixing the mess it has made. There&apos;s also a presumption that open source systems and methodologies are inherently more secure simply because they are open source. While I understand the reasons for these views -- and partly agree with them -- I worry when complex issues are reduced to simple credos. 
&lt;/p&gt;
&lt;p&gt;
One of the most interesting things I read, while researching this piece, was John Viega&apos;s &lt;a href=&quot;http://www.onlamp.com/pub/a/security/2004/09/16/open_source_security_myths.html&quot;&gt;Open Source Security: Still a Myth&lt;/a&gt;. He writes:
&lt;blockquote class=&quot;personQuote JohnViega&quot;&gt;
All in all, in some cases open source may have more eyeballs on it. Are those eyeballs looking for security problems, though? Are they doing it in a structured way? Do they have any compelling incentive? Do they have a reason to focus dozens or hundreds of hours on the problem to approach the level of effort generally given to a commercial audit? The answer to all of these questions is usually no. A good deal of software doesn&apos;t get examined for security at all, open source or not. When it does, commercial software tends to receive much more qualified attention.
&lt;/blockquote&gt;
This observation deserves more &lt;a href=&quot;http://www.bloglines.com/citations?url=http%3A//www.onlamp.com/pub/a/security/2004/09/16/open_source_security_myths.html%3Fpage%3D2&quot;&gt;discussion&lt;/a&gt; than it has received. I&apos;ll be particularly interested to see whether &lt;a href=&quot;http://www.sourcelabs.com&quot;&gt;SourceLabs&lt;/a&gt; and &lt;a href=&quot;http://www.spikesource.com&quot;&gt;SpikeSource&lt;/a&gt;, two newly-announced companies focused on commercial support of open source &quot;stacks,&quot; will include security auditing and certification as part of the value they add. 
&lt;/p&gt;
&lt;p&gt;
I think Microsoft&apos;s software is neither more nor less inherently securable than open source software. When a &lt;a href=&quot;http://www.computerworld.co.nz/news.nsf/0/DE21CCB0DF897F93CC256D9C002129C6&quot;&gt;source code analyzer&lt;/a&gt; was pointed at Microsoft&apos;s code a few years ago, it found a bunch of bugs. The same thing happened more recently when &lt;a href=&quot;http://linuxbugs.coverity.com/main.html&quot;&gt;another analyzer&lt;/a&gt; was pointed at the Linux code. It&apos;s just plain hard work to write secure software. Microsoft is handicapped by its history of wrong thinking on the subject. But open source ought not rest on its laurels. Everyone needs to work harder, and more importantly smarter. If Microsoft finally starts to be credible on the issue of security, it&apos;s good news for everyone -- including open source. The competition between these two software superpowers will keep everyone on their toes.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
Led by Michael Howard (among others), Microsoft has embarked on a serious program of reform and claims it is committed to implementing these best practices. The comprehensive effort begins, Howard says, with mandatory training. Within 60 days of hiring, every developer assigned to a product team is indoctrinated with the principles of what Microsoft calls its Security Development Lifecycle.
<br/><br/>
"The level of security expertise in the marketplace -- in the industry in general -- is abysmally low," Howard says. "So we need to bridge that gap."
<br/><br/>
Independent experts, including Schneier, Metzger, and Cooper, can't accurately gauge the extent or the effect of these reforms. But they all know people who work inside Microsoft, and they all relay anecdotal reports that there has been real change in the right direction. Could Microsoft's military discipline make it a leader rather than a follower in the quest for more secure software?
<br/><br/>
Of course, even if Microsoft did everything right from now on, the sins of the past will be with us for many years to come -- and no one believes that Microsoft is doing everything right. The bottom line? We're in a world of hurt because of Microsoft's past practices. That pain can't and won't go away anytime soon. But some of the right medicines are finally being applied, the results are tangible, and there's a reason for Microsoft to stay the course.
<br/><br/>
"The problem has always been economic, not technical," Schneier says. "It was never in Microsoft's economic interest to make its stuff secure."
<br/><br/>
But now, as growing numbers of people abandon Internet Explorer for Mozilla Firefox and as organizations look to Linux and OpenOffice.org as alternatives to Microsoft's OS and productivity suite, the cost of insecure software is starting to be felt in Redmond. If that pressure keeps up, we'll all be safer. Eventually. [Full story at <a href="http://www.infoworld.com/reports/41SRmssecure.html">InfoWorld.com</a>]
</blockquote>
</p>
<p>
Like religion and politics, security tends to defy rational discussion. Among open source advocates, for example, it's an article of faith that Microsoft is incapable of fixing the mess it has made. There's also a presumption that open source systems and methodologies are inherently more secure simply because they are open source. While I understand the reasons for these views -- and partly agree with them -- I worry when complex issues are reduced to simple credos. 
</p>
<p>
One of the most interesting things I read, while researching this piece, was John Viega's <a href="http://www.onlamp.com/pub/a/security/2004/09/16/open_source_security_myths.html">Open Source Security: Still a Myth</a>. He writes:
<blockquote class="personQuote JohnViega">
All in all, in some cases open source may have more eyeballs on it. Are those eyeballs looking for security problems, though? Are they doing it in a structured way? Do they have any compelling incentive? Do they have a reason to focus dozens or hundreds of hours on the problem to approach the level of effort generally given to a commercial audit? The answer to all of these questions is usually no. A good deal of software doesn't get examined for security at all, open source or not. When it does, commercial software tends to receive much more qualified attention.
</blockquote>
This observation deserves more <a href="http://www.bloglines.com/citations?url=http%3A//www.onlamp.com/pub/a/security/2004/09/16/open_source_security_myths.html%3Fpage%3D2">discussion</a> than it has received. I'll be particularly interested to see whether <a href="http://www.sourcelabs.com">SourceLabs</a> and <a href="http://www.spikesource.com">SpikeSource</a>, two newly-announced companies focused on commercial support of open source "stacks," will include security auditing and certification as part of the value they add. 
</p>
<p>
I think Microsoft's software is neither more nor less inherently securable than open source software. When a <a href="http://www.computerworld.co.nz/news.nsf/0/DE21CCB0DF897F93CC256D9C002129C6">source code analyzer</a> was pointed at Microsoft's code a few years ago, it found a bunch of bugs. The same thing happened more recently when <a href="http://linuxbugs.coverity.com/main.html">another analyzer</a> was pointed at the Linux code. It's just plain hard work to write secure software. Microsoft is handicapped by its history of wrong thinking on the subject. But open source ought not rest on its laurels. Everyone needs to work harder, and more importantly smarter. If Microsoft finally starts to be credible on the issue of security, it's good news for everyone -- including open source. The competition between these two software superpowers will keep everyone on their toes.
</p>

			</body>
			<dc:date>2004-10-12T14:47:03-05:00</dc:date>
			</item>
		<item>
			<title>Computer telephony: why wait?</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/10/05.html#a1089</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
The other day I had one of those living-in-the-future moments. An important phone call came in, but the colleague I needed to bring into the call wasn&apos;t available, and the caller couldn&apos;t wait. So, with the caller&apos;s permission, I recorded the call and forwarded it as an MP3 file to my colleague. When she later replayed the conversation, she got crucial points -- both factual and emotional -- that I never could have accurately reported.
&lt;br/&gt;&lt;br/&gt;
VoIP fantasy come true? Not even close. The call came in on a POTS line. I answered on a regular -- not even cordless -- telephone. The integration between the voice and data networks was courtesy of JK Audio&apos;s QuickTap.
&lt;br/&gt;&lt;br/&gt;...&lt;br/&gt;&lt;br/&gt;
There are dozens of ways in which personal computers can add value to the PSTN. Caller ID screen pops, conference call setup, call logging, voice archiving, and user-programmable IVR (interactive voice response) are just some of the productivity aids that we should all take for granted by now -- but that almost nobody can.
&lt;br/&gt;&lt;br/&gt;
The story of the Bellheads vs. the Netheads is a myth in the primary sense of that word. It explains a real conflict between worldviews in a way most people can easily understand, and that&apos;s useful. But we can&apos;t believe it literally. If the mammals keep waiting for the dinosaurs to die out, we&apos;ll keep missing chances to exploit them. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/10/01/40OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
When you click through to the column, you&apos;ll see that its title -- as published online and in the print magazine -- uses the phrase &quot;IP telephony,&quot; not &quot;computer telephony&quot; as originally written. I can understand why the change was made: the former term is more familiar than the latter. And that&apos;s exactly my point. We tend to assume that the integration of computers and telephones means both devices must use TCP/IP. That&apos;s an enabler, but not a requirement. There&apos;s a ton of useful integration you can do by bridging between TCP/IP and the PSTN.
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
The other day I had one of those living-in-the-future moments. An important phone call came in, but the colleague I needed to bring into the call wasn&apos;t available, and the caller couldn&apos;t wait. So, with the caller&apos;s permission, I recorded the call and forwarded it as an MP3 file to my colleague. When she later replayed the conversation, she got crucial points -- both factual and emotional -- that I never could have accurately reported.
&lt;br/&gt;&lt;br/&gt;
VoIP fantasy come true? Not even close. The call came in on a POTS line. I answered on a regular -- not even cordless -- telephone. The integration between the voice and data networks was courtesy of JK Audio&apos;s QuickTap.
&lt;br/&gt;&lt;br/&gt;...&lt;br/&gt;&lt;br/&gt;
There are dozens of ways in which personal computers can add value to the PSTN. Caller ID screen pops, conference call setup, call logging, voice archiving, and user-programmable IVR (interactive voice response) are just some of the productivity aids that we should all take for granted by now -- but that almost nobody can.
&lt;br/&gt;&lt;br/&gt;
The story of the Bellheads vs. the Netheads is a myth in the primary sense of that word. It explains a real conflict between worldviews in a way most people can easily understand, and that&apos;s useful. But we can&apos;t believe it literally. If the mammals keep waiting for the dinosaurs to die out, we&apos;ll keep missing chances to exploit them. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/10/01/40OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
When you click through to the column, you&apos;ll see that its title -- as published online and in the print magazine -- uses the phrase &quot;IP telephony,&quot; not &quot;computer telephony&quot; as originally written. I can understand why the change was made: the former term is more familiar than the latter. And that&apos;s exactly my point. We tend to assume that the integration of computers and telephones means both devices must use TCP/IP. That&apos;s an enabler, but not a requirement. There&apos;s a ton of useful integration you can do by bridging between TCP/IP and the PSTN.
&lt;/p&gt;
&lt;p&gt;
Here&apos;s an variation of the example I gave in the column. Recently, while recording a phone conversation, I wanted to bring new participants into the call. On my end of the call, I used three-way calling to bring in another POTS line. On the other end of the call, my partner did the same. Using my Internet-attached computer, I can do all sorts of interesting things with the resulting MP3 file: filter it, edit it, email it, blog it. Just because your phone and computer don&apos;t use the same network for audio data doesn&apos;t mean your phone and computer can&apos;t be usefully combined. 
&lt;/p&gt;
&lt;p&gt;
Here&apos;s another example: &lt;a href=&quot;http://www.asterisk.org/&quot;&gt;Asterisk&lt;/a&gt;, the open source PBX for Linux. It supports various flavors of VoIP. But fundamentally, it&apos;s a PBX. You can use it simply to add intelligent control to your POTS lines, and that&apos;s just what some folks &lt;a href=&quot;http://weblog.infoworld.com/udell/2004/05/26.html&quot;&gt;do&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
VoIP is terrific, and it&apos;s the future. But that future isn&apos;t evenly distributed yet, and won&apos;t be for a while. In the meantime, let&apos;s not lose sight of the original sense of the phrase &lt;a href=&quot;http://www.byte.com/art/9407/sec8/sec8.htm&quot;&gt;computer telephony&lt;/a&gt;. It&apos;s compatible with, but not necessarily the same as, IP telephony.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
The other day I had one of those living-in-the-future moments. An important phone call came in, but the colleague I needed to bring into the call wasn't available, and the caller couldn't wait. So, with the caller's permission, I recorded the call and forwarded it as an MP3 file to my colleague. When she later replayed the conversation, she got crucial points -- both factual and emotional -- that I never could have accurately reported.
<br/><br/>
VoIP fantasy come true? Not even close. The call came in on a POTS line. I answered on a regular -- not even cordless -- telephone. The integration between the voice and data networks was courtesy of JK Audio's QuickTap.
<br/><br/>...<br/><br/>
There are dozens of ways in which personal computers can add value to the PSTN. Caller ID screen pops, conference call setup, call logging, voice archiving, and user-programmable IVR (interactive voice response) are just some of the productivity aids that we should all take for granted by now -- but that almost nobody can.
<br/><br/>
The story of the Bellheads vs. the Netheads is a myth in the primary sense of that word. It explains a real conflict between worldviews in a way most people can easily understand, and that's useful. But we can't believe it literally. If the mammals keep waiting for the dinosaurs to die out, we'll keep missing chances to exploit them. [Full story at <a href="http://www.infoworld.com/article/04/10/01/40OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
When you click through to the column, you'll see that its title -- as published online and in the print magazine -- uses the phrase "IP telephony," not "computer telephony" as originally written. I can understand why the change was made: the former term is more familiar than the latter. And that's exactly my point. We tend to assume that the integration of computers and telephones means both devices must use TCP/IP. That's an enabler, but not a requirement. There's a ton of useful integration you can do by bridging between TCP/IP and the PSTN.
</p>
<p>
Here's an variation of the example I gave in the column. Recently, while recording a phone conversation, I wanted to bring new participants into the call. On my end of the call, I used three-way calling to bring in another POTS line. On the other end of the call, my partner did the same. Using my Internet-attached computer, I can do all sorts of interesting things with the resulting MP3 file: filter it, edit it, email it, blog it. Just because your phone and computer don't use the same network for audio data doesn't mean your phone and computer can't be usefully combined. 
</p>
<p>
Here's another example: <a href="http://www.asterisk.org/">Asterisk</a>, the open source PBX for Linux. It supports various flavors of VoIP. But fundamentally, it's a PBX. You can use it simply to add intelligent control to your POTS lines, and that's just what some folks <a href="http://weblog.infoworld.com/udell/2004/05/26.html">do</a>.
</p>
<p>
VoIP is terrific, and it's the future. But that future isn't evenly distributed yet, and won't be for a while. In the meantime, let's not lose sight of the original sense of the phrase <a href="http://www.byte.com/art/9407/sec8/sec8.htm">computer telephony</a>. It's compatible with, but not necessarily the same as, IP telephony.
</p>

			</body>
			<dc:date>2004-10-05T12:50:21-05:00</dc:date>
			</item>
		<item>
			<title>Making old technologies new</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/09/28.html#a1084</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
&quot;I&apos;m worried about the up-and-coming generation of geeks,&quot; a leading Internet innovator told me at a recent tech gathering. &quot;They try stuff, use it, and throw it away. But I don&apos;t see many of them inventing new foundation technologies.&quot; In other words: rip, mix, burn.
&lt;br/&gt;&lt;br/&gt;
Is this a bad thing? Perhaps quite the opposite. There&apos;s no shortage of foundation technologies, and latent within many of them are unanticipated uses. Discovering new ways to use existing technologies is arguably as important as inventing new ones.
&lt;br/&gt;&lt;br/&gt;...&lt;br/&gt;&lt;br/&gt;
I don&apos;t want to overstate the case, because the architecture of the Web has plenty of limitations, but it&apos;s amazing how it continues to be a fertile source of these happy discoveries. In a December 2002 column titled &quot;&lt;a href=&quot;http://www.infoworld.com/1958&quot;&gt;Nobody Expects the Spontaneous Integration&lt;/a&gt; (with apologies to Monty Python), I enumerated the key features of an environment conducive to innovation: Web services (broadly construed), REST, loose coupling, and scripting. It&apos;s even clearer to me today that these are the right ingredients.
&lt;br/&gt;&lt;br/&gt;
But somebody has to see what&apos;s possible and then make it happen. Lots of key insights require no fundamental new invention, yet remain undiscovered. If it&apos;s true that &quot;Generation Z&quot; techies are hardwired to think this way, it would be great. And if they aren&apos;t, we ought to be teaching them how. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/09/24/39OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
&quot;I&apos;m worried about the up-and-coming generation of geeks,&quot; a leading Internet innovator told me at a recent tech gathering. &quot;They try stuff, use it, and throw it away. But I don&apos;t see many of them inventing new foundation technologies.&quot; In other words: rip, mix, burn.
&lt;br/&gt;&lt;br/&gt;
Is this a bad thing? Perhaps quite the opposite. There&apos;s no shortage of foundation technologies, and latent within many of them are unanticipated uses. Discovering new ways to use existing technologies is arguably as important as inventing new ones.
&lt;br/&gt;&lt;br/&gt;...&lt;br/&gt;&lt;br/&gt;
I don&apos;t want to overstate the case, because the architecture of the Web has plenty of limitations, but it&apos;s amazing how it continues to be a fertile source of these happy discoveries. In a December 2002 column titled &quot;&lt;a href=&quot;http://www.infoworld.com/1958&quot;&gt;Nobody Expects the Spontaneous Integration&lt;/a&gt; (with apologies to Monty Python), I enumerated the key features of an environment conducive to innovation: Web services (broadly construed), REST, loose coupling, and scripting. It&apos;s even clearer to me today that these are the right ingredients.
&lt;br/&gt;&lt;br/&gt;
But somebody has to see what&apos;s possible and then make it happen. Lots of key insights require no fundamental new invention, yet remain undiscovered. If it&apos;s true that &quot;Generation Z&quot; techies are hardwired to think this way, it would be great. And if they aren&apos;t, we ought to be teaching them how. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/09/24/39OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
"I'm worried about the up-and-coming generation of geeks," a leading Internet innovator told me at a recent tech gathering. "They try stuff, use it, and throw it away. But I don't see many of them inventing new foundation technologies." In other words: rip, mix, burn.
<br/><br/>
Is this a bad thing? Perhaps quite the opposite. There's no shortage of foundation technologies, and latent within many of them are unanticipated uses. Discovering new ways to use existing technologies is arguably as important as inventing new ones.
<br/><br/>...<br/><br/>
I don't want to overstate the case, because the architecture of the Web has plenty of limitations, but it's amazing how it continues to be a fertile source of these happy discoveries. In a December 2002 column titled "<a href="http://www.infoworld.com/1958">Nobody Expects the Spontaneous Integration</a> (with apologies to Monty Python), I enumerated the key features of an environment conducive to innovation: Web services (broadly construed), REST, loose coupling, and scripting. It's even clearer to me today that these are the right ingredients.
<br/><br/>
But somebody has to see what's possible and then make it happen. Lots of key insights require no fundamental new invention, yet remain undiscovered. If it's true that "Generation Z" techies are hardwired to think this way, it would be great. And if they aren't, we ought to be teaching them how. [Full story at <a href="http://www.infoworld.com/article/04/09/24/39OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
</p>

			</body>
			<dc:date>2004-09-28T11:11:43-05:00</dc:date>
			</item>
		<item>
			<title>From access control to accountability</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/09/21.html#a1080</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
In the physical world we rely on eyewitnesses and increasingly, especially in Britain, on cameras. In the virtual world, according to Dan Geer, we&apos;re now approaching a critical fork in the road: &quot;To the left, we surveil people. To the right, we surveil data. I&apos;m arguing for data-level file-tracking because if I have to surveil either people or data, I think it&apos;s highly important that we choose to surveil the data, not the people. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/09/17/38OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
In this column I mention an audio interview with Dan Geer. It&apos;s full of unique insights. Listen, for example, to &lt;a href=&quot;http://www.itconversations.com/clip.php?showid=84&amp;amp;start=13:50&amp;amp;stop=15:44&quot;&gt;this clip&lt;/a&gt; (2 min, mp3), on the value of cross-disciplinary knowledge. Here&apos;s part of it:
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
In the physical world we rely on eyewitnesses and increasingly, especially in Britain, on cameras. In the virtual world, according to Dan Geer, we&apos;re now approaching a critical fork in the road: &quot;To the left, we surveil people. To the right, we surveil data. I&apos;m arguing for data-level file-tracking because if I have to surveil either people or data, I think it&apos;s highly important that we choose to surveil the data, not the people. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/09/17/38OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
In this column I mention an audio interview with Dan Geer. It&apos;s full of unique insights. Listen, for example, to &lt;a href=&quot;http://www.itconversations.com/clip.php?showid=84&amp;amp;start=13:50&amp;amp;stop=15:44&quot;&gt;this clip&lt;/a&gt; (2 min, mp3), on the value of cross-disciplinary knowledge. Here&apos;s part of it:
&lt;/p&gt;
&lt;p&gt;
&lt;blockquote class=&quot;personQuote DanGeer&quot;&gt;
Everybody who is a leader in the security field today came at it from some other field, because when we all started, you couldn&apos;t get trained for this formally.
&lt;br/&gt;...&lt;br/&gt;
Right now, if we want to extract knowledge, skill, method, technique, you name it, from other fields, this is our last best chance. 
&lt;br/&gt;...&lt;br/&gt;
We do not have time to invent everything we need in security from scratch. We have to steal it from every other field that has something worth stealing.
&lt;/blockquote&gt;
It&apos;s a great point. There&apos;s clearly a need to professionalize computer and network security. Companies today have to train new engineers in best security practices (threat modeling, attack surface area reduction) that should be taught in school but aren&apos;t. But since the most dangerous attackers are out-of-the-box thinkers, it seems reasonable to suppose that intellectual diversity is an important defense. 
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
In the physical world we rely on eyewitnesses and increasingly, especially in Britain, on cameras. In the virtual world, according to Dan Geer, we're now approaching a critical fork in the road: "To the left, we surveil people. To the right, we surveil data. I'm arguing for data-level file-tracking because if I have to surveil either people or data, I think it's highly important that we choose to surveil the data, not the people. [Full story at <a href="http://www.infoworld.com/article/04/09/17/38OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
In this column I mention an audio interview with Dan Geer. It's full of unique insights. Listen, for example, to <a href="http://www.itconversations.com/clip.php?showid=84&amp;start=13:50&amp;stop=15:44">this clip</a> (2 min, mp3), on the value of cross-disciplinary knowledge. Here's part of it:
</p>
<p>
<blockquote class="personQuote DanGeer">
Everybody who is a leader in the security field today came at it from some other field, because when we all started, you couldn't get trained for this formally.
<br/>...<br/>
Right now, if we want to extract knowledge, skill, method, technique, you name it, from other fields, this is our last best chance. 
<br/>...<br/>
We do not have time to invent everything we need in security from scratch. We have to steal it from every other field that has something worth stealing.
</blockquote>
It's a great point. There's clearly a need to professionalize computer and network security. Companies today have to train new engineers in best security practices (threat modeling, attack surface area reduction) that should be taught in school but aren't. But since the most dangerous attackers are out-of-the-box thinkers, it seems reasonable to suppose that intellectual diversity is an important defense. 
</p>

			</body>
			<dc:date>2004-09-21T08:39:09-05:00</dc:date>
			</item>
		<item>
			<title>Doing the impossible</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/09/14.html#a1075</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
It&apos;s funny how circumstances can change your perception of what&apos;s possible. A few months ago, key Microsoft architects were telling me that it would be impossible to decouple the Avalon presentation subsystem from the Longhorn OS. Now they&apos;re huddling in conference rooms trying to figure out how to do just that. It makes me wonder what else might turn out to be possible after all.
&lt;br/&gt;...&lt;br/&gt;
Here&apos;s an interesting footnote to the WinFS news: According to John Montgomery, director of product management for the developer division at Microsoft, good old full-text search will play a larger role in Longhorn. Empowering us to find and organize our stuff was, after all, one of the major goals of the project. The early rhetoric discounted full-text search in favor of the highly structured WinFS approach and suggested it would be impossible to deliver the desired benefits any other way. Now architects are huddling in conference rooms trying to figure out how to do the impossible. Of course, Apple had already previewed a similar strategy for the forthcoming Tiger version of OS X. If Steve Jobs can demonstrate Spotlight in 2004 and if Apple can ship it in 2005, Microsoft ought to be able to match that by 2006. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/09/10/37OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
In a session on corporate blogging at this year&apos;s &lt;a href=&quot;http://www.google.com/search?q=foo%20camp&quot;&gt;Foo Camp&lt;/a&gt;, intranet bloggers at Google and Microsoft were able to compare notes. The conclusion wasn&apos;t shocking: internal content is indexed and made available more aggressively at Google than at Microsoft. 
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
It&apos;s funny how circumstances can change your perception of what&apos;s possible. A few months ago, key Microsoft architects were telling me that it would be impossible to decouple the Avalon presentation subsystem from the Longhorn OS. Now they&apos;re huddling in conference rooms trying to figure out how to do just that. It makes me wonder what else might turn out to be possible after all.
&lt;br/&gt;...&lt;br/&gt;
Here&apos;s an interesting footnote to the WinFS news: According to John Montgomery, director of product management for the developer division at Microsoft, good old full-text search will play a larger role in Longhorn. Empowering us to find and organize our stuff was, after all, one of the major goals of the project. The early rhetoric discounted full-text search in favor of the highly structured WinFS approach and suggested it would be impossible to deliver the desired benefits any other way. Now architects are huddling in conference rooms trying to figure out how to do the impossible. Of course, Apple had already previewed a similar strategy for the forthcoming Tiger version of OS X. If Steve Jobs can demonstrate Spotlight in 2004 and if Apple can ship it in 2005, Microsoft ought to be able to match that by 2006. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/09/10/37OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
In a session on corporate blogging at this year&apos;s &lt;a href=&quot;http://www.google.com/search?q=foo%20camp&quot;&gt;Foo Camp&lt;/a&gt;, intranet bloggers at Google and Microsoft were able to compare notes. The conclusion wasn&apos;t shocking: internal content is indexed and made available more aggressively at Google than at Microsoft. 
&lt;/p&gt;
&lt;p&gt;
For those who discount Microsoft&apos;s strategy, that&apos;s another link in an evidence chain leading to the conclusion that WinFS will never ship. As I &lt;a href=&quot;http://www.itconversations.com/clip.php?showid=199&amp;amp;start=14:17&amp;amp;stop=15:16&quot;&gt;mentioned&lt;/a&gt; [1 min, mp3] on last week&apos;s &lt;a href=&quot;http://www.itconversations.com/shows/detail199.html&quot;&gt;Gillmor Gang show&lt;/a&gt;, I see no reason to leap to that conclusion. We will want a universal database, with hybrid object/relational/XML capabilities, on the desktop. Microsoft is closer to delivering it than anyone else, and the WinFS delay doesn&apos;t change that.
&lt;/p&gt;
&lt;p&gt;
But we also want the Google effects: aggregation, search. As usual, the discussion tends to polarize. We need to get past the clich&amp;#233;s -- &quot;structured search trumps freetext search&quot; versus &quot;freetext search trumps structured search&quot; -- and recognize that these are complementary modes that need to work well individually and better together.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
It's funny how circumstances can change your perception of what's possible. A few months ago, key Microsoft architects were telling me that it would be impossible to decouple the Avalon presentation subsystem from the Longhorn OS. Now they're huddling in conference rooms trying to figure out how to do just that. It makes me wonder what else might turn out to be possible after all.
<br/>...<br/>
Here's an interesting footnote to the WinFS news: According to John Montgomery, director of product management for the developer division at Microsoft, good old full-text search will play a larger role in Longhorn. Empowering us to find and organize our stuff was, after all, one of the major goals of the project. The early rhetoric discounted full-text search in favor of the highly structured WinFS approach and suggested it would be impossible to deliver the desired benefits any other way. Now architects are huddling in conference rooms trying to figure out how to do the impossible. Of course, Apple had already previewed a similar strategy for the forthcoming Tiger version of OS X. If Steve Jobs can demonstrate Spotlight in 2004 and if Apple can ship it in 2005, Microsoft ought to be able to match that by 2006. [Full story at <a href="http://www.infoworld.com/article/04/09/10/37OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
In a session on corporate blogging at this year's <a href="http://www.google.com/search?q=foo%20camp">Foo Camp</a>, intranet bloggers at Google and Microsoft were able to compare notes. The conclusion wasn't shocking: internal content is indexed and made available more aggressively at Google than at Microsoft. 
</p>
<p>
For those who discount Microsoft's strategy, that's another link in an evidence chain leading to the conclusion that WinFS will never ship. As I <a href="http://www.itconversations.com/clip.php?showid=199&amp;start=14:17&amp;stop=15:16">mentioned</a> [1 min, mp3] on last week's <a href="http://www.itconversations.com/shows/detail199.html">Gillmor Gang show</a>, I see no reason to leap to that conclusion. We will want a universal database, with hybrid object/relational/XML capabilities, on the desktop. Microsoft is closer to delivering it than anyone else, and the WinFS delay doesn't change that.
</p>
<p>
But we also want the Google effects: aggregation, search. As usual, the discussion tends to polarize. We need to get past the clich&#233;s -- "structured search trumps freetext search" versus "freetext search trumps structured search" -- and recognize that these are complementary modes that need to work well individually and better together.
</p>

			</body>
			<dc:date>2004-09-14T09:45:47-05:00</dc:date>
			</item>
		<item>
			<title>The TiVo Olympics</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/09/06.html#a1069</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
Every fourth summer, IT trade pubs write about the technology that powers the Olympic Games. It&apos;s always an interesting topic, but apart from an enhanced focus on security, the Athens 2004 stories were little changed from their Sydney 2000 counterparts. And yet, this Olympics was utterly transformed, for me and for a few million other viewers, by TiVo.
&lt;br/&gt;&lt;br/&gt;
Thanks to this cheap, Linux-based appliance, I was able to compress all of the events that interested me into a fraction of the time it would otherwise have taken to watch them. I&apos;ll always remember the Athens games as the first TiVo Olympics. Now I&apos;m thinking about ways to make the next one even better.
&lt;br/&gt;...&lt;br/&gt;
In our world -- where blogs, Wi-Fi, and computer-attached video cameras are the norm -- we&apos;ve begun to redefine the art of event coverage. If you want to see how the Beijing Olympics should be covered in 2008, visit a tech conference next year. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/09/03/36OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
Every fourth summer, IT trade pubs write about the technology that powers the Olympic Games. It&apos;s always an interesting topic, but apart from an enhanced focus on security, the Athens 2004 stories were little changed from their Sydney 2000 counterparts. And yet, this Olympics was utterly transformed, for me and for a few million other viewers, by TiVo.
&lt;br/&gt;&lt;br/&gt;
Thanks to this cheap, Linux-based appliance, I was able to compress all of the events that interested me into a fraction of the time it would otherwise have taken to watch them. I&apos;ll always remember the Athens games as the first TiVo Olympics. Now I&apos;m thinking about ways to make the next one even better.
&lt;br/&gt;...&lt;br/&gt;
In our world -- where blogs, Wi-Fi, and computer-attached video cameras are the norm -- we&apos;ve begun to redefine the art of event coverage. If you want to see how the Beijing Olympics should be covered in 2008, visit a tech conference next year. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/09/03/36OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
Every fourth summer, IT trade pubs write about the technology that powers the Olympic Games. It's always an interesting topic, but apart from an enhanced focus on security, the Athens 2004 stories were little changed from their Sydney 2000 counterparts. And yet, this Olympics was utterly transformed, for me and for a few million other viewers, by TiVo.
<br/><br/>
Thanks to this cheap, Linux-based appliance, I was able to compress all of the events that interested me into a fraction of the time it would otherwise have taken to watch them. I'll always remember the Athens games as the first TiVo Olympics. Now I'm thinking about ways to make the next one even better.
<br/>...<br/>
In our world -- where blogs, Wi-Fi, and computer-attached video cameras are the norm -- we've begun to redefine the art of event coverage. If you want to see how the Beijing Olympics should be covered in 2008, visit a tech conference next year. [Full story at <a href="http://www.infoworld.com/article/04/09/03/36OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
</p>

			</body>
			<dc:date>2004-09-06T23:14:01-05:00</dc:date>
			</item>
		<item>
			<title>Information routing, redux</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/09/01.html#a1066</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
In last week&apos;s column, I mentioned &lt;a href=&quot;http://del.icio.us/&quot;&gt;del.icio.us&lt;/a&gt;, Joshua Schachter&apos;s &quot;social bookmarking&quot; service. Since then, I&apos;ve explored the service more deeply in a series of &lt;a href=&quot;http://del.icio.us/judell/del.icio.us&quot;&gt;blog entries&lt;/a&gt;. Using del.icio.us, I&apos;m now able to process information in dramatically more efficient ways.
&lt;br/&gt;...&lt;br/&gt;
In a &lt;a href=&quot;http://www.infoworld.com/article/03/03/07/10stratdev_1.html&quot;&gt;March 2003 column&lt;/a&gt;, I wrote about the challenges of doing publish/subscribe at Internet scale. &lt;a href=&quot;http://www.cs.ucl.ac.uk/staff/D.Rosenblum&quot;&gt;David Rosenblum&lt;/a&gt;, who was then CTO of messaging startup PreCache, had described to me an optimization procedure he called &quot;filter merging.&quot; The architecture of del.icio.us lends itself to just that kind of optimization. The combination of several trusted human filters, with respect to some topic of interest, yields a powerful merged filter. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/08/27/35OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
In last week&apos;s column, I mentioned &lt;a href=&quot;http://del.icio.us/&quot;&gt;del.icio.us&lt;/a&gt;, Joshua Schachter&apos;s &quot;social bookmarking&quot; service. Since then, I&apos;ve explored the service more deeply in a series of &lt;a href=&quot;http://del.icio.us/judell/del.icio.us&quot;&gt;blog entries&lt;/a&gt;. Using del.icio.us, I&apos;m now able to process information in dramatically more efficient ways.
&lt;br/&gt;...&lt;br/&gt;
In a &lt;a href=&quot;http://www.infoworld.com/article/03/03/07/10stratdev_1.html&quot;&gt;March 2003 column&lt;/a&gt;, I wrote about the challenges of doing publish/subscribe at Internet scale. &lt;a href=&quot;http://www.cs.ucl.ac.uk/staff/D.Rosenblum&quot;&gt;David Rosenblum&lt;/a&gt;, who was then CTO of messaging startup PreCache, had described to me an optimization procedure he called &quot;filter merging.&quot; The architecture of del.icio.us lends itself to just that kind of optimization. The combination of several trusted human filters, with respect to some topic of interest, yields a powerful merged filter. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/08/27/35OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
I was offline writing this column, at the tail end of vacation, so I missed the big news about Microsoft&apos;s delaying WinFS in order to make a 2006 date for Longhorn. It&apos;s tempting to observe that my current fascination with del.icio.us (a lightweight, collaborative, web-native metadata system) helps prove that WinFS (a heavyweight, single-user, desktop-bound metadata system) really is the over-engineered solution-in-search-of-a-problem that many people now claim it to be. For what it&apos;s worth, I don&apos;t think that. If you haven&apos;t seen my &lt;a href=&quot;http://weblog.infoworld.com/udell/2004/07/20.html#a1044&quot;&gt;extended interview&lt;/a&gt; with Quentin Clark, the director of program management for WinFS, you may find it a useful read now. Granted, I found that URL by way of &lt;a href=&quot;http://del.icio.us/judell/winfs&quot;&gt;this tag&lt;/a&gt;. But there&apos;s no question in my mind that a smart local datastore has to be part of the equation. Or that the &quot;object/relational/XML trinity&quot; envisioned by Clark is an inevitable and necessary convergence.
&lt;/p&gt;
&lt;p&gt;
It&apos;s hard to cry a river for a company like Microsoft, but sometimes they&apos;re damned if they don&apos;t (&quot;Microsoft never innovates&quot;) and damned if they do (&quot;Microsoft never ships&quot;). 
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
In last week's column, I mentioned <a href="http://del.icio.us/">del.icio.us</a>, Joshua Schachter's "social bookmarking" service. Since then, I've explored the service more deeply in a series of <a href="http://del.icio.us/judell/del.icio.us">blog entries</a>. Using del.icio.us, I'm now able to process information in dramatically more efficient ways.
<br/>...<br/>
In a <a href="http://www.infoworld.com/article/03/03/07/10stratdev_1.html">March 2003 column</a>, I wrote about the challenges of doing publish/subscribe at Internet scale. <a href="http://www.cs.ucl.ac.uk/staff/D.Rosenblum">David Rosenblum</a>, who was then CTO of messaging startup PreCache, had described to me an optimization procedure he called "filter merging." The architecture of del.icio.us lends itself to just that kind of optimization. The combination of several trusted human filters, with respect to some topic of interest, yields a powerful merged filter. [Full story at <a href="http://www.infoworld.com/article/04/08/27/35OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
</p>
<p>
I was offline writing this column, at the tail end of vacation, so I missed the big news about Microsoft's delaying WinFS in order to make a 2006 date for Longhorn. It's tempting to observe that my current fascination with del.icio.us (a lightweight, collaborative, web-native metadata system) helps prove that WinFS (a heavyweight, single-user, desktop-bound metadata system) really is the over-engineered solution-in-search-of-a-problem that many people now claim it to be. For what it's worth, I don't think that. If you haven't seen my <a href="http://weblog.infoworld.com/udell/2004/07/20.html#a1044">extended interview</a> with Quentin Clark, the director of program management for WinFS, you may find it a useful read now. Granted, I found that URL by way of <a href="http://del.icio.us/judell/winfs">this tag</a>. But there's no question in my mind that a smart local datastore has to be part of the equation. Or that the "object/relational/XML trinity" envisioned by Clark is an inevitable and necessary convergence.
</p>
<p>
It's hard to cry a river for a company like Microsoft, but sometimes they're damned if they don't ("Microsoft never innovates") and damned if they do ("Microsoft never ships"). 
</p>

			</body>
			<dc:date>2004-09-01T10:04:44-05:00</dc:date>
			</item>
		<item>
			<title>Collaborative knowledge gardening</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/08/30.html#a1064</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
Next month I&apos;ll be giving a talk on social software to an audience of CTOs. To prime the pump, I&apos;ve been spending some time with two of the newer services in the space: &lt;a href=&quot;http://www.flickr.com/&quot;&gt;Flickr&lt;/a&gt; and &lt;a href=&quot;http://del.icio.us/&quot;&gt;del.icio.us&lt;/a&gt;. Neither focuses primarily on the six-degrees-of-separation dynamic that drives LinkedIn, Orkut, Friendster, and Spoke. Flickr, as I would explain it to my friends and family, is a way to easily upload and share digital photos. And del.icio.us does the same thing for Web bookmarks.
&lt;br/&gt;&lt;br/&gt;
To CTOs, though, I&apos;d say that both are collaborative systems for building a shared database of items, developing a metadata vocabulary about the items, performing metadata-driven queries, and monitoring change in areas of interest.  [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/08/20/34OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
While I was on vacation, this column percolated through the infosphere. Now that I&apos;m back, I&apos;m seeing some interesting ripple effects. It had already been apparent that in addition to monitoring the blog conversations swirling around a column, it would be interesting to monitor the del.icio.us traffic too. Not surprisingly, those two views have now begun to merge.
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
Next month I&apos;ll be giving a talk on social software to an audience of CTOs. To prime the pump, I&apos;ve been spending some time with two of the newer services in the space: &lt;a href=&quot;http://www.flickr.com/&quot;&gt;Flickr&lt;/a&gt; and &lt;a href=&quot;http://del.icio.us/&quot;&gt;del.icio.us&lt;/a&gt;. Neither focuses primarily on the six-degrees-of-separation dynamic that drives LinkedIn, Orkut, Friendster, and Spoke. Flickr, as I would explain it to my friends and family, is a way to easily upload and share digital photos. And del.icio.us does the same thing for Web bookmarks.
&lt;br/&gt;&lt;br/&gt;
To CTOs, though, I&apos;d say that both are collaborative systems for building a shared database of items, developing a metadata vocabulary about the items, performing metadata-driven queries, and monitoring change in areas of interest.  [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/08/20/34OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
While I was on vacation, this column percolated through the infosphere. Now that I&apos;m back, I&apos;m seeing some interesting ripple effects. It had already been apparent that in addition to monitoring the blog conversations swirling around a column, it would be interesting to monitor the del.icio.us traffic too. Not surprisingly, those two views have now begun to merge.
&lt;/p&gt;
&lt;p&gt;
For example, several of the responses tracked &lt;a href=&quot;http://del.icio.us/url/cb11a179a892a138f0c5cadacb2129ea&quot;&gt;here&lt;/a&gt; on del.icio.us also show up &lt;a href=&quot;http://www.bloglines.com/citations?url=http%3A//www.infoworld.com/article/04/08/20/34OPstrategic_1.html&quot;&gt;here&lt;/a&gt; in Bloglines. &lt;a href=&quot;http://www.freegorifero.com/fabio_sergio.html&quot;&gt;Fabio Sergio&lt;/a&gt; has the explanation:
&lt;blockquote class=&quot;personQuote FabioSergio&quot;&gt;
I&apos;ve joined the ranks of those using &lt;a href=&quot;http://del.icio.us/&quot;&gt;Del.icio.us&lt;/a&gt; to keep track of random sightings.&lt;br/&gt;In case you&apos;re interested here&apos;s &lt;a href=&quot;http://del.icio.us/freegorifero&quot;&gt;freegorifero&apos;s Del.icio.us page&lt;/a&gt; and its de-rigueur &lt;a href=&quot;http://del.icio.us/rss/freegorifero&quot;&gt;RSS feed&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;&lt;i&gt;Update&lt;/i&gt;:&lt;br/&gt;The great folks over at &lt;a href=&quot;http://www.feedburner.com/&quot;&gt;FeedBurner&lt;/a&gt; have enhanced their SmartFeed to enable Del.icio.us and &lt;a href=&quot;http://www.flickr.com/&quot;&gt;Flickr&lt;/a&gt; users to neatly package their &lt;i&gt;social bookmarks&lt;/i&gt; and photos together with their &quot;regular&quot; weblog feed.&lt;br/&gt;This means that freegorifero&apos;s weblog RSS feed will now also include freegorifero&apos;s Del.icio.us links.&lt;br/&gt;Isn&apos;t life wonderful?&lt;br/&gt;&lt;br/&gt;Talk about the power of &lt;a href=&quot;http://www.kottke.org/04/08/web-platform&quot;&gt;small pieces&lt;/a&gt;, &lt;a href=&quot;http://interconnected.org/home/2004/08/13/what_id_like_from&quot;&gt;loosely&lt;/a&gt; &lt;a href=&quot;http://interconnected.org/home/2004/08/16/this_is_about_atom&quot;&gt;joined&lt;/a&gt;. [&lt;a href=&quot;http://www.freegorifero.com/weblog/2004_08_01_weblog_archive.html#109152890118730318&quot;&gt;freegorifero&lt;/a&gt;]
&lt;/blockquote&gt;
Although this &lt;a href=&quot;http://www.burningdoor.com/feedburner/archives/000660.html&quot;&gt;feed&lt;/a&gt; &lt;a href=&quot;http://www.burningdoor.com/feedburner/archives/000695.html&quot;&gt;splicing&lt;/a&gt; stuff is interesting, there are can be subtle consequences. For example, a link appearing in a linkblog (such as a del.icio.us feed) tends to represent a smaller investment of thought and effort than a link appearing in a &quot;regular&quot; blog. If the two sources of links remain distinct, I can choose to regard them separately or, at my discretion, merge them. If they&apos;re blended at the source, though, it may or may not be possible to recover that distinction. 
&lt;/p&gt;
&lt;p&gt;
Here&apos;s another interesting ripple effect I noticed. To help me decide which tags to &lt;a href=&quot;http://del.icio.us/judell/del.icio.us+flickr+socialsoftware+metadata+folksonomy&quot;&gt;assign to this item&lt;/a&gt; I&apos;m now writing, I took advantage of the fact that the column it refers to has been percolating for a week. The tags that the del.icio.us collective applied to that column, excluding those used only once, were as follows:
&lt;pre&gt;
         del.icio.us: 16
              flickr: 10
                 web:  9
              social:  8
            software:  6
      socialsoftware:  6
           delicious:  6
       collaboration:  6
            metadata:  5
                tags:  4
           knowledge:  4
            taxonomy:  3
knowledge_management:  3
                  km:  3
            internet:  3
          folksonomy:  3
           community:  3
             tagging:  2
      socialnetworks:  2
     social_software:  2
         photography:  2
             network:  2
 knowledgemanagement:  2
               ideas:  2
       collaborative:  2
            articles:  2
&lt;/pre&gt;
This view helped me decide which tags to apply to this item. My choices were:
&lt;pre&gt;
del.icio.us flickr socialsoftware metadata folksonomy
&lt;/pre&gt;
I wrote a one-off script to create this view, as needed, for items that have been tagged by multiple del.icio.us users. The &quot;folksonomy&quot;-style services -- including del.icio.us, Flickr, and &lt;a href=&quot;http://www.furl.net/&quot;&gt;furl&lt;/a&gt; -- track tag popularity in a general way, but how would this more granular view of tag popularity influence behavior? I guess someone will try that experiment soon, and then we&apos;ll see.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
Next month I'll be giving a talk on social software to an audience of CTOs. To prime the pump, I've been spending some time with two of the newer services in the space: <a href="http://www.flickr.com/">Flickr</a> and <a href="http://del.icio.us/">del.icio.us</a>. Neither focuses primarily on the six-degrees-of-separation dynamic that drives LinkedIn, Orkut, Friendster, and Spoke. Flickr, as I would explain it to my friends and family, is a way to easily upload and share digital photos. And del.icio.us does the same thing for Web bookmarks.
<br/><br/>
To CTOs, though, I'd say that both are collaborative systems for building a shared database of items, developing a metadata vocabulary about the items, performing metadata-driven queries, and monitoring change in areas of interest.  [Full story at <a href="http://www.infoworld.com/article/04/08/20/34OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
While I was on vacation, this column percolated through the infosphere. Now that I'm back, I'm seeing some interesting ripple effects. It had already been apparent that in addition to monitoring the blog conversations swirling around a column, it would be interesting to monitor the del.icio.us traffic too. Not surprisingly, those two views have now begun to merge.
</p>
<p>
For example, several of the responses tracked <a href="http://del.icio.us/url/cb11a179a892a138f0c5cadacb2129ea">here</a> on del.icio.us also show up <a href="http://www.bloglines.com/citations?url=http%3A//www.infoworld.com/article/04/08/20/34OPstrategic_1.html">here</a> in Bloglines. <a href="http://www.freegorifero.com/fabio_sergio.html">Fabio Sergio</a> has the explanation:
<blockquote class="personQuote FabioSergio">
I've joined the ranks of those using <a href="http://del.icio.us/">Del.icio.us</a> to keep track of random sightings.<br/>In case you're interested here's <a href="http://del.icio.us/freegorifero">freegorifero's Del.icio.us page</a> and its de-rigueur <a href="http://del.icio.us/rss/freegorifero">RSS feed</a>.<br/><br/><i>Update</i>:<br/>The great folks over at <a href="http://www.feedburner.com/">FeedBurner</a> have enhanced their SmartFeed to enable Del.icio.us and <a href="http://www.flickr.com/">Flickr</a> users to neatly package their <i>social bookmarks</i> and photos together with their "regular" weblog feed.<br/>This means that freegorifero's weblog RSS feed will now also include freegorifero's Del.icio.us links.<br/>Isn't life wonderful?<br/><br/>Talk about the power of <a href="http://www.kottke.org/04/08/web-platform">small pieces</a>, <a href="http://interconnected.org/home/2004/08/13/what_id_like_from">loosely</a> <a href="http://interconnected.org/home/2004/08/16/this_is_about_atom">joined</a>. [<a href="http://www.freegorifero.com/weblog/2004_08_01_weblog_archive.html#109152890118730318">freegorifero</a>]
</blockquote>
Although this <a href="http://www.burningdoor.com/feedburner/archives/000660.html">feed</a> <a href="http://www.burningdoor.com/feedburner/archives/000695.html">splicing</a> stuff is interesting, there are can be subtle consequences. For example, a link appearing in a linkblog (such as a del.icio.us feed) tends to represent a smaller investment of thought and effort than a link appearing in a "regular" blog. If the two sources of links remain distinct, I can choose to regard them separately or, at my discretion, merge them. If they're blended at the source, though, it may or may not be possible to recover that distinction. 
</p>
<p>
Here's another interesting ripple effect I noticed. To help me decide which tags to <a href="http://del.icio.us/judell/del.icio.us+flickr+socialsoftware+metadata+folksonomy">assign to this item</a> I'm now writing, I took advantage of the fact that the column it refers to has been percolating for a week. The tags that the del.icio.us collective applied to that column, excluding those used only once, were as follows:
<pre>
         del.icio.us: 16
              flickr: 10
                 web:  9
              social:  8
            software:  6
      socialsoftware:  6
           delicious:  6
       collaboration:  6
            metadata:  5
                tags:  4
           knowledge:  4
            taxonomy:  3
knowledge_management:  3
                  km:  3
            internet:  3
          folksonomy:  3
           community:  3
             tagging:  2
      socialnetworks:  2
     social_software:  2
         photography:  2
             network:  2
 knowledgemanagement:  2
               ideas:  2
       collaborative:  2
            articles:  2
</pre>
This view helped me decide which tags to apply to this item. My choices were:
<pre>
del.icio.us flickr socialsoftware metadata folksonomy
</pre>
I wrote a one-off script to create this view, as needed, for items that have been tagged by multiple del.icio.us users. The "folksonomy"-style services -- including del.icio.us, Flickr, and <a href="http://www.furl.net/">furl</a> -- track tag popularity in a general way, but how would this more granular view of tag popularity influence behavior? I guess someone will try that experiment soon, and then we'll see.
</p>

			</body>
			<dc:date>2004-08-30T06:17:11-05:00</dc:date>
			</item>
		<item>
			<title>The scalability myth</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/08/19.html#a1063</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
At one time or another, nearly every kind of information technology has been judged and found wanting. The failures are often summed up in that most damning of epithets: &quot;It doesn&apos;t scale.&quot; The reason, of course, is that at one time or another, for one reason or another, every kind of information technology has failed to scale.	
&lt;br/&gt;&lt;br/&gt;
Unfortunately for the victims tarred with that brush, scalability is a wildly imprecise term. Applications may be expected to scale up to massive server farms or scale down to handsets. And size is only one axis of scalability. Others include bandwidth, transactional intensity, service availability, transitivity of trust, query performance, and the human comprehensibility of source code or end-user information display.
&lt;br/&gt;&lt;br/&gt;...&lt;br/&gt;&lt;br/&gt;
It&apos;s tempting to conclude that the decentralized, loosely coupled Web architecture is intrinsically scalable. Not so. We&apos;ve simply learned -- and are still learning -- how to mix those ingredients properly. Formats and protocols that people can read and write enhance scalability along the human axis. Caching and load-balancing techniques help us with bandwidth and availability. But some kinds of problems will always require a different mix of ingredients. Microsoft has consolidated its internal business applications, for example, onto a single instance of SAP. In this case, the successful architecture is centralized and tightly coupled.
&lt;br/&gt;&lt;br/&gt;
For any technology, the statement &quot;X doesn&apos;t scale&quot; is a myth. The reality is that there are ways X can be made to scale and ways to screw up trying. Understanding the possibilities and avoiding the pitfalls requires experience that doesn&apos;t (yet) come in a box. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/08/13/33FEmyth6_1.html?s=feature&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
Based on the &lt;a href=&quot;http://www.bloglines.com/citations?url=http%3A//www.infoworld.com/article/04/08/13/33FEmyth6_1.html&quot;&gt;reaction so far&lt;/a&gt;, it seems like this piece went over well. It&apos;s &lt;i&gt;so&lt;/i&gt; nice to be able to track reactions that way.
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
At one time or another, nearly every kind of information technology has been judged and found wanting. The failures are often summed up in that most damning of epithets: &quot;It doesn&apos;t scale.&quot; The reason, of course, is that at one time or another, for one reason or another, every kind of information technology has failed to scale.	
&lt;br/&gt;&lt;br/&gt;
Unfortunately for the victims tarred with that brush, scalability is a wildly imprecise term. Applications may be expected to scale up to massive server farms or scale down to handsets. And size is only one axis of scalability. Others include bandwidth, transactional intensity, service availability, transitivity of trust, query performance, and the human comprehensibility of source code or end-user information display.
&lt;br/&gt;&lt;br/&gt;...&lt;br/&gt;&lt;br/&gt;
It&apos;s tempting to conclude that the decentralized, loosely coupled Web architecture is intrinsically scalable. Not so. We&apos;ve simply learned -- and are still learning -- how to mix those ingredients properly. Formats and protocols that people can read and write enhance scalability along the human axis. Caching and load-balancing techniques help us with bandwidth and availability. But some kinds of problems will always require a different mix of ingredients. Microsoft has consolidated its internal business applications, for example, onto a single instance of SAP. In this case, the successful architecture is centralized and tightly coupled.
&lt;br/&gt;&lt;br/&gt;
For any technology, the statement &quot;X doesn&apos;t scale&quot; is a myth. The reality is that there are ways X can be made to scale and ways to screw up trying. Understanding the possibilities and avoiding the pitfalls requires experience that doesn&apos;t (yet) come in a box. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/08/13/33FEmyth6_1.html?s=feature&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
Based on the &lt;a href=&quot;http://www.bloglines.com/citations?url=http%3A//www.infoworld.com/article/04/08/13/33FEmyth6_1.html&quot;&gt;reaction so far&lt;/a&gt;, it seems like this piece went over well. It&apos;s &lt;i&gt;so&lt;/i&gt; nice to be able to track reactions that way.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
At one time or another, nearly every kind of information technology has been judged and found wanting. The failures are often summed up in that most damning of epithets: "It doesn't scale." The reason, of course, is that at one time or another, for one reason or another, every kind of information technology has failed to scale.	
<br/><br/>
Unfortunately for the victims tarred with that brush, scalability is a wildly imprecise term. Applications may be expected to scale up to massive server farms or scale down to handsets. And size is only one axis of scalability. Others include bandwidth, transactional intensity, service availability, transitivity of trust, query performance, and the human comprehensibility of source code or end-user information display.
<br/><br/>...<br/><br/>
It's tempting to conclude that the decentralized, loosely coupled Web architecture is intrinsically scalable. Not so. We've simply learned -- and are still learning -- how to mix those ingredients properly. Formats and protocols that people can read and write enhance scalability along the human axis. Caching and load-balancing techniques help us with bandwidth and availability. But some kinds of problems will always require a different mix of ingredients. Microsoft has consolidated its internal business applications, for example, onto a single instance of SAP. In this case, the successful architecture is centralized and tightly coupled.
<br/><br/>
For any technology, the statement "X doesn't scale" is a myth. The reality is that there are ways X can be made to scale and ways to screw up trying. Understanding the possibilities and avoiding the pitfalls requires experience that doesn't (yet) come in a box. [Full story at <a href="http://www.infoworld.com/article/04/08/13/33FEmyth6_1.html?s=feature">InfoWorld.com</a>]
</blockquote>
Based on the <a href="http://www.bloglines.com/citations?url=http%3A//www.infoworld.com/article/04/08/13/33FEmyth6_1.html">reaction so far</a>, it seems like this piece went over well. It's <i>so</i> nice to be able to track reactions that way.
</p>

			</body>
			<dc:date>2004-08-19T00:54:47-05:00</dc:date>
			</item>
		<item>
			<title>The architecture of participation</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/08/17.html#a1061</link>
			<description>
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
Discussions about open source and innovation tend to cluster around two opposing memes. One says that open source can&apos;t innovate; the other that only open source can innovate. Both are wrong. Sometimes large, well-funded R&amp;amp;D programs can achieve breakthroughs that lone geniuses can&apos;t. And sometimes the reverse is true. Either way, the real innovation of the open source movement is the architecture of participation. It can help turn a good idea -- wherever it came from -- into a best-quality implementation. Software companies that don&apos;t choose the open source model have to find other ways to recruit and reward participants. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/08/13/33OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;] [See also: &lt;a href=&quot;http://del.icio.us/judell/opensource+jonudell&quot;&gt;other open-source-related items&lt;/a&gt;]
&lt;/blockquote&gt;
The term &apos;open source&apos; presumes that the essence of software is source code, and that participation means hacking it. And that&apos;s true. But the emergence of the services model creates modes of participation that don&apos;t require access to source. Back in 2000, Rael Dornfest introduced the term &lt;a href=&quot;http://www.oreillynet.com/pub/a/rss/2000/05/09/meerkat_api.html&quot;&gt;open services&lt;/a&gt; in order to make that distinction. 
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote class=&quot;pubQuote InfoWorld&quot;&gt;
Discussions about open source and innovation tend to cluster around two opposing memes. One says that open source can&apos;t innovate; the other that only open source can innovate. Both are wrong. Sometimes large, well-funded R&amp;amp;D programs can achieve breakthroughs that lone geniuses can&apos;t. And sometimes the reverse is true. Either way, the real innovation of the open source movement is the architecture of participation. It can help turn a good idea -- wherever it came from -- into a best-quality implementation. Software companies that don&apos;t choose the open source model have to find other ways to recruit and reward participants. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/08/13/33OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;] [See also: &lt;a href=&quot;http://del.icio.us/judell/opensource+jonudell&quot;&gt;other open-source-related items&lt;/a&gt;]
&lt;/blockquote&gt;
The term &apos;open source&apos; presumes that the essence of software is source code, and that participation means hacking it. And that&apos;s true. But the emergence of the services model creates modes of participation that don&apos;t require access to source. Back in 2000, Rael Dornfest introduced the term &lt;a href=&quot;http://www.oreillynet.com/pub/a/rss/2000/05/09/meerkat_api.html&quot;&gt;open services&lt;/a&gt; in order to make that distinction. 
&lt;/p&gt;
&lt;p&gt;
Of course, participation needn&apos;t involve programming at all. Much of software&apos;s value is created by the community that surrounds it. Such communities can flourish, or not, independently of whether source code is open or closed.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote class="pubQuote InfoWorld">
Discussions about open source and innovation tend to cluster around two opposing memes. One says that open source can't innovate; the other that only open source can innovate. Both are wrong. Sometimes large, well-funded R&amp;D programs can achieve breakthroughs that lone geniuses can't. And sometimes the reverse is true. Either way, the real innovation of the open source movement is the architecture of participation. It can help turn a good idea -- wherever it came from -- into a best-quality implementation. Software companies that don't choose the open source model have to find other ways to recruit and reward participants. [Full story at <a href="http://www.infoworld.com/article/04/08/13/33OPstrategic_1.html">InfoWorld.com</a>] [See also: <a href="http://del.icio.us/judell/opensource+jonudell">other open-source-related items</a>]
</blockquote>
The term 'open source' presumes that the essence of software is source code, and that participation means hacking it. And that's true. But the emergence of the services model creates modes of participation that don't require access to source. Back in 2000, Rael Dornfest introduced the term <a href="http://www.oreillynet.com/pub/a/rss/2000/05/09/meerkat_api.html">open services</a> in order to make that distinction. 
</p>
<p>
Of course, participation needn't involve programming at all. Much of software's value is created by the community that surrounds it. Such communities can flourish, or not, independently of whether source code is open or closed.
</p>

			</body>
			<dc:date>2004-08-17T11:13:28-05:00</dc:date>
			</item>
		<item>
			<title>A strategic vision for dynamic languages</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/08/09.html#a1056</link>
			<description>
&lt;blockquote&gt;
As operating systems consolidate around managed interfaces, they&apos;ll choose the Java and .Net VMs, not the Perl, Python, or PHP VMs. But the agility of the dynamic languages and the collaborative energy of their open source communities are two of the pistons that crank the engine of progress. These worlds need to converge -- and at the O&apos;Reilly Open Source Conference there was new evidence that they will. Jim Hugunin, father of Jython (Python for JVM), made a pair of dramatic announcements. He has released the first version of IronPython (Python for CLR/Mono). And by the time you read this, he&apos;ll have started his new job at Microsoft. Good hire! [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/08/06/32OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
In my keynote talk at the &lt;a href=&quot;http://www.vanpyz.org/conference&quot;&gt;Vancouver Python Workshop&lt;/a&gt;, I stressed the strategic importance of integrating dynamic languages with the Java and .NET runtimes. I&apos;ve written a lot about dynamic languages and yet, when asked to define what they are and why they matter, I struggle. So from now on, I&apos;m going to point people to &lt;a href=&quot;http://www.activestate.com/Company/NewsRoom/whitepapers_ADL.plex&quot;&gt;this whitepaper&lt;/a&gt; by David Ascher, who is the managing director of &lt;a href=&quot;http://www.activestate.com/&quot;&gt;ActiveState&lt;/a&gt; and led the development of &lt;a href=&quot;http://www.activestate.com/Products/Komodo/&quot;&gt;Komodo&lt;/a&gt;, a Mozilla-based IDE (integrated development environment) for dynamic languages.
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote&gt;
As operating systems consolidate around managed interfaces, they&apos;ll choose the Java and .Net VMs, not the Perl, Python, or PHP VMs. But the agility of the dynamic languages and the collaborative energy of their open source communities are two of the pistons that crank the engine of progress. These worlds need to converge -- and at the O&apos;Reilly Open Source Conference there was new evidence that they will. Jim Hugunin, father of Jython (Python for JVM), made a pair of dramatic announcements. He has released the first version of IronPython (Python for CLR/Mono). And by the time you read this, he&apos;ll have started his new job at Microsoft. Good hire! [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/08/06/32OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
In my keynote talk at the &lt;a href=&quot;http://www.vanpyz.org/conference&quot;&gt;Vancouver Python Workshop&lt;/a&gt;, I stressed the strategic importance of integrating dynamic languages with the Java and .NET runtimes. I&apos;ve written a lot about dynamic languages and yet, when asked to define what they are and why they matter, I struggle. So from now on, I&apos;m going to point people to &lt;a href=&quot;http://www.activestate.com/Company/NewsRoom/whitepapers_ADL.plex&quot;&gt;this whitepaper&lt;/a&gt; by David Ascher, who is the managing director of &lt;a href=&quot;http://www.activestate.com/&quot;&gt;ActiveState&lt;/a&gt; and led the development of &lt;a href=&quot;http://www.activestate.com/Products/Komodo/&quot;&gt;Komodo&lt;/a&gt;, a Mozilla-based IDE (integrated development environment) for dynamic languages.
&lt;/p&gt;
&lt;p&gt;
Ascher&apos;s whitepaper lists a series of challenges for dynamic languages. Topping the list is &lt;i&gt;Lack of strategic vision&lt;/i&gt;:
&lt;blockquote&gt;
To date, dynamic languages have not been driven by strategic plans. In fact, most successful open source projects (Mono and Gnome being notable exceptions) have enjoyed success in spite of a lack of a long-term plan, let alone a clearly defined vision. The pragmatic, tactical approach to fix what&apos;s broken today as opposed to anticipate the problems of tomorrow, has, when combined with the selection processes inherent in the open source ecosystem, led to a survival of the fittest for today&apos;s problems, rather than rewarding those with the most compelling vision for future success. It&apos;s worth asking if the lack of a plan is guaranteed to be a winning approach in the long term. A good example to highlight here is the different approaches toward newer standards such as SOAP, evident in dynamic languages vs. Java and C#, for example. The dynamic language communities are generally content with letting &quot;someone else&quot; worry about the standards-definition process, and are confident that they&apos;ll be able to support them when they are defined and stable. In contrast, Microsoft and Sun have committed significant resources to defining the standard, for clearly competitive, non-altruistic reasons. It is reasonable to expect that the resulting standards have been more influenced by how well they fit with those languages than with languages that got involved late in the standard-definition process. In this case, the combination of strategic planning and the resources of large corporations clearly resulted in shifts in the standard toward more strongly-typed languages. An interesting counter-spin is that dynamic language enthusiasts tend to prefer a different approach to web services over SOAP (namely REpresentational State Transfer, known as REST), which (they claim) is simpler, more pragmatic, portable, robust, and less resource-intensive. [&lt;a href=&quot;http://www.activestate.com/Company/NewsRoom/whitepapers_ADL.plex&quot;&gt;David Ascher&lt;/a&gt;]
&lt;/blockquote&gt;
This statement resonates with a number of things I&apos;ve read lately, including Sean McGrath&apos;s &lt;a href=&quot;http://seanmcgrath.blogspot.com/archives/2004_07_25_seanmcgrath_archive.html#109102081041015012&quot;&gt;remark&lt;/a&gt; that &quot;anyone coding middleware in a statically compiled language, working in a commercial environment where time is money, has rocks in their head,&quot; and Adam Bosworth&apos;s &lt;a href=&quot;http://www.adambosworth.net/archives/000024.html&quot;&gt;comments&lt;/a&gt; about the relevance of REST and lightweight XML-over-HTTP to a services organization such as Google.
&lt;/p&gt;
&lt;p&gt;
Shortly before Bosworth left BEA for Google, we met to discuss the &lt;a href=&quot;http://www.infoworld.com/article/04/06/11/24OPstrategic_1.html&quot;&gt;Alchemy project&lt;/a&gt;. He remarked, in passing, that he thinks there&apos;s a 40% chance that SOAP may still fail. I hope he&apos;s wrong. We&apos;re going to need a fabric of pervasive intermediation, and the TCP/IP of Web services -- that is, SOAP -- will enable that. But we&apos;re also going to need a whole lot of agility woven into that fabric. I want middleware that works like Indigo, but I want to program it in a language that works like Python. 
&lt;/p&gt;



</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote>
As operating systems consolidate around managed interfaces, they'll choose the Java and .Net VMs, not the Perl, Python, or PHP VMs. But the agility of the dynamic languages and the collaborative energy of their open source communities are two of the pistons that crank the engine of progress. These worlds need to converge -- and at the O'Reilly Open Source Conference there was new evidence that they will. Jim Hugunin, father of Jython (Python for JVM), made a pair of dramatic announcements. He has released the first version of IronPython (Python for CLR/Mono). And by the time you read this, he'll have started his new job at Microsoft. Good hire! [Full story at <a href="http://www.infoworld.com/article/04/08/06/32OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
In my keynote talk at the <a href="http://www.vanpyz.org/conference">Vancouver Python Workshop</a>, I stressed the strategic importance of integrating dynamic languages with the Java and .NET runtimes. I've written a lot about dynamic languages and yet, when asked to define what they are and why they matter, I struggle. So from now on, I'm going to point people to <a href="http://www.activestate.com/Company/NewsRoom/whitepapers_ADL.plex">this whitepaper</a> by David Ascher, who is the managing director of <a href="http://www.activestate.com/">ActiveState</a> and led the development of <a href="http://www.activestate.com/Products/Komodo/">Komodo</a>, a Mozilla-based IDE (integrated development environment) for dynamic languages.
</p>
<p>
Ascher's whitepaper lists a series of challenges for dynamic languages. Topping the list is <i>Lack of strategic vision</i>:
<blockquote>
To date, dynamic languages have not been driven by strategic plans. In fact, most successful open source projects (Mono and Gnome being notable exceptions) have enjoyed success in spite of a lack of a long-term plan, let alone a clearly defined vision. The pragmatic, tactical approach to fix what's broken today as opposed to anticipate the problems of tomorrow, has, when combined with the selection processes inherent in the open source ecosystem, led to a survival of the fittest for today's problems, rather than rewarding those with the most compelling vision for future success. It's worth asking if the lack of a plan is guaranteed to be a winning approach in the long term. A good example to highlight here is the different approaches toward newer standards such as SOAP, evident in dynamic languages vs. Java and C#, for example. The dynamic language communities are generally content with letting "someone else" worry about the standards-definition process, and are confident that they'll be able to support them when they are defined and stable. In contrast, Microsoft and Sun have committed significant resources to defining the standard, for clearly competitive, non-altruistic reasons. It is reasonable to expect that the resulting standards have been more influenced by how well they fit with those languages than with languages that got involved late in the standard-definition process. In this case, the combination of strategic planning and the resources of large corporations clearly resulted in shifts in the standard toward more strongly-typed languages. An interesting counter-spin is that dynamic language enthusiasts tend to prefer a different approach to web services over SOAP (namely REpresentational State Transfer, known as REST), which (they claim) is simpler, more pragmatic, portable, robust, and less resource-intensive. [<a href="http://www.activestate.com/Company/NewsRoom/whitepapers_ADL.plex">David Ascher</a>]
</blockquote>
This statement resonates with a number of things I've read lately, including Sean McGrath's <a href="http://seanmcgrath.blogspot.com/archives/2004_07_25_seanmcgrath_archive.html#109102081041015012">remark</a> that "anyone coding middleware in a statically compiled language, working in a commercial environment where time is money, has rocks in their head," and Adam Bosworth's <a href="http://www.adambosworth.net/archives/000024.html">comments</a> about the relevance of REST and lightweight XML-over-HTTP to a services organization such as Google.
</p>
<p>
Shortly before Bosworth left BEA for Google, we met to discuss the <a href="http://www.infoworld.com/article/04/06/11/24OPstrategic_1.html">Alchemy project</a>. He remarked, in passing, that he thinks there's a 40% chance that SOAP may still fail. I hope he's wrong. We're going to need a fabric of pervasive intermediation, and the TCP/IP of Web services -- that is, SOAP -- will enable that. But we're also going to need a whole lot of agility woven into that fabric. I want middleware that works like Indigo, but I want to program it in a language that works like Python. 
</p>




			</body>
			<dc:date>2004-08-09T11:21:43-05:00</dc:date>
			</item>
		<item>
			<title>Tragedy of the network commons</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/08/09.html#a1055</link>
			<description>
&lt;blockquote&gt;
A recent survey found that 75 percent of Dartmouth students have shared their network passwords. They like having people who know their password, explained Denise Anthony, a sociologist who spoke at the PKI summit conference I attended earlier this month. &quot;They like having someone who can check their e-mail for them or log them in to places where they&apos;re supposed to be.&quot;
&lt;br/&gt;...&lt;br/&gt;
As security technologists, we&apos;re easily dazzled by our shiny cryptographic swords. But while we&apos;re brandishing our swords, our users -- like Indiana Jones in that famous scene from Raiders of the Lost Ark -- might simply pull out their guns and shoot us. Better security protocols alone can&apos;t thwart such game-changing behavior. We need to understand what motivates the behavior and figure out which carrots and sticks will influence it. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/07/30/31OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
The responses to this column expressed a mixture of hope and resignation. The hope: that in a token-based authentication regime, tokens will feel more like personal property than passwords do, and that as a result, there will be less promiscuous behavior. The resignation: that, as one reader put it, &quot;there is no access control system that is so convenient that some significant percentage of users will not intentionally circumvent it in one way or another at least some of the time.&quot;
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote&gt;
A recent survey found that 75 percent of Dartmouth students have shared their network passwords. They like having people who know their password, explained Denise Anthony, a sociologist who spoke at the PKI summit conference I attended earlier this month. &quot;They like having someone who can check their e-mail for them or log them in to places where they&apos;re supposed to be.&quot;
&lt;br/&gt;...&lt;br/&gt;
As security technologists, we&apos;re easily dazzled by our shiny cryptographic swords. But while we&apos;re brandishing our swords, our users -- like Indiana Jones in that famous scene from Raiders of the Lost Ark -- might simply pull out their guns and shoot us. Better security protocols alone can&apos;t thwart such game-changing behavior. We need to understand what motivates the behavior and figure out which carrots and sticks will influence it. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/07/30/31OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
The responses to this column expressed a mixture of hope and resignation. The hope: that in a token-based authentication regime, tokens will feel more like personal property than passwords do, and that as a result, there will be less promiscuous behavior. The resignation: that, as one reader put it, &quot;there is no access control system that is so convenient that some significant percentage of users will not intentionally circumvent it in one way or another at least some of the time.&quot;
&lt;/p&gt;
&lt;p&gt;
The takeaway point, for me, is that Dartmouth&apos;s team of security researchers includes a non-geek whose role is to try to understand the motivations and behaviors of users. This kind of cross-disciplinary approach is the exception. It should be the norm.
&lt;/p&gt;</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote>
A recent survey found that 75 percent of Dartmouth students have shared their network passwords. They like having people who know their password, explained Denise Anthony, a sociologist who spoke at the PKI summit conference I attended earlier this month. "They like having someone who can check their e-mail for them or log them in to places where they're supposed to be."
<br/>...<br/>
As security technologists, we're easily dazzled by our shiny cryptographic swords. But while we're brandishing our swords, our users -- like Indiana Jones in that famous scene from Raiders of the Lost Ark -- might simply pull out their guns and shoot us. Better security protocols alone can't thwart such game-changing behavior. We need to understand what motivates the behavior and figure out which carrots and sticks will influence it. [Full story at <a href="http://www.infoworld.com/article/04/07/30/31OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
The responses to this column expressed a mixture of hope and resignation. The hope: that in a token-based authentication regime, tokens will feel more like personal property than passwords do, and that as a result, there will be less promiscuous behavior. The resignation: that, as one reader put it, "there is no access control system that is so convenient that some significant percentage of users will not intentionally circumvent it in one way or another at least some of the time."
</p>
<p>
The takeaway point, for me, is that Dartmouth's team of security researchers includes a non-geek whose role is to try to understand the motivations and behaviors of users. This kind of cross-disciplinary approach is the exception. It should be the norm.
</p>
			</body>
			<dc:date>2004-08-09T08:34:46-05:00</dc:date>
			</item>
		<item>
			<title>Federating identity the Shibboleth way</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/07/27.html#a1048</link>
			<description>
&lt;blockquote&gt;
In last week&apos;s column, I suggested that individuals and corporations should be the authoritative sources of basic information about themselves. That way, if an application needs my name, address, and phone number, I can refer it to a source that I control and guarantee to be correct. But how many applications really need my name, address, and phone number? Capturing the identity of individuals, along with personal information about them, has become a habit. In a climate of increasing concern about privacy, it&apos;s a bad habit we must learn to resist. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/07/23/30OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote&gt;
In last week&apos;s column, I suggested that individuals and corporations should be the authoritative sources of basic information about themselves. That way, if an application needs my name, address, and phone number, I can refer it to a source that I control and guarantee to be correct. But how many applications really need my name, address, and phone number? Capturing the identity of individuals, along with personal information about them, has become a habit. In a climate of increasing concern about privacy, it&apos;s a bad habit we must learn to resist. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/07/23/30OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
As I mention in this week&apos;s column, the notion of selective disclosure is a core value of &lt;a href=&quot;http://shibboleth.internet2.edu/&quot;&gt;Shibboleth&lt;/a&gt;, an Internet2 project that&apos;s gaining some real traction in the higher-ed world.
&lt;/p&gt;
&lt;p&gt;
What&apos;s up with the name &apos;Shibboleth&apos;? Here&apos;s the scoop:
&lt;blockquote class=&quot;personQuote Suzanne Kemmer&quot;&gt;
A shibboleth is a kind of linguistic password: A way of speaking (a pronunciation, or the use of a particular expression) that identifies one as a member of an &apos;in&apos; group. The purpose of a shibboleth is exclusionary as much as inclusionary: A person whose way of speaking violates a shibboleth is identified as an outsider and thereby excluded by the group. (This phenomenon is part of the &quot;Judge a book by its cover&quot; tendency apparently embedded in human cognition, and the use of language to distinguish social groups).
&lt;br/&gt;&lt;br/&gt;
The story behind the word is recorded in the biblical Book of Judges. The word shibboleth in ancient Hebrew dialects meant &apos;ear of grain&apos; (or, some say, &apos;stream&apos;). Some groups pronounced it with a sh sound, but speakers of related dialects pronounced it with an s. [&lt;a href=&quot;http://www.ruf.rice.edu/~kemmer/Words/shibboleth.html&quot;&gt;Suzanne Kemmer&lt;/a&gt;]
&lt;/blockquote&gt;
The federated identity system called Shibboleth deals with group membership, rather than individual identity. It&apos;s interesting to think about use cases, outside higher ed, that don&apos;t require the identification of individuals. Consider website registration. The &lt;a href=&quot;http://www.nytimes.com/auth/login&quot;&gt;New York Times&lt;/a&gt;, or &lt;a href=&quot;https://login.idg.com/idg/IWRegister.do&quot;&gt;InfoWorld&lt;/a&gt;, or other media sites that want to qualify readers to their advertisers, don&apos;t really need to know me as an individual. They just need to aggregate readers into groups. From the Times&apos; perspective, I&apos;m a member of the group of American male writers who work in Media/Publishing/Broadcasting and who read the Times regularly but do not subscribe. From InfoWorld&apos;s perspective, I&apos;m a member of the group of consultants (Technical) working in the area of Tech: Publishing who strategize about (but do not directly purchase) IT assets. 
&lt;/p&gt;
&lt;p&gt;
What if it were possible -- and convenient -- to affiliate with these groups without giving up personally identifying information? In reaction to registration regimes that are too granular, the &lt;a href=&quot;http://www.wired.com/news/print/0,1294,64270,00.html&quot;&gt;bugmenot.com&lt;/a&gt; hack abolishes granularity. But maybe there&apos;s a middle ground.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote>
In last week's column, I suggested that individuals and corporations should be the authoritative sources of basic information about themselves. That way, if an application needs my name, address, and phone number, I can refer it to a source that I control and guarantee to be correct. But how many applications really need my name, address, and phone number? Capturing the identity of individuals, along with personal information about them, has become a habit. In a climate of increasing concern about privacy, it's a bad habit we must learn to resist. [Full story at <a href="http://www.infoworld.com/article/04/07/23/30OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
</p>
<p>
As I mention in this week's column, the notion of selective disclosure is a core value of <a href="http://shibboleth.internet2.edu/">Shibboleth</a>, an Internet2 project that's gaining some real traction in the higher-ed world.
</p>
<p>
What's up with the name 'Shibboleth'? Here's the scoop:
<blockquote class="personQuote Suzanne Kemmer">
A shibboleth is a kind of linguistic password: A way of speaking (a pronunciation, or the use of a particular expression) that identifies one as a member of an 'in' group. The purpose of a shibboleth is exclusionary as much as inclusionary: A person whose way of speaking violates a shibboleth is identified as an outsider and thereby excluded by the group. (This phenomenon is part of the "Judge a book by its cover" tendency apparently embedded in human cognition, and the use of language to distinguish social groups).
<br/><br/>
The story behind the word is recorded in the biblical Book of Judges. The word shibboleth in ancient Hebrew dialects meant 'ear of grain' (or, some say, 'stream'). Some groups pronounced it with a sh sound, but speakers of related dialects pronounced it with an s. [<a href="http://www.ruf.rice.edu/~kemmer/Words/shibboleth.html">Suzanne Kemmer</a>]
</blockquote>
The federated identity system called Shibboleth deals with group membership, rather than individual identity. It's interesting to think about use cases, outside higher ed, that don't require the identification of individuals. Consider website registration. The <a href="http://www.nytimes.com/auth/login">New York Times</a>, or <a href="https://login.idg.com/idg/IWRegister.do">InfoWorld</a>, or other media sites that want to qualify readers to their advertisers, don't really need to know me as an individual. They just need to aggregate readers into groups. From the Times' perspective, I'm a member of the group of American male writers who work in Media/Publishing/Broadcasting and who read the Times regularly but do not subscribe. From InfoWorld's perspective, I'm a member of the group of consultants (Technical) working in the area of Tech: Publishing who strategize about (but do not directly purchase) IT assets. 
</p>
<p>
What if it were possible -- and convenient -- to affiliate with these groups without giving up personally identifying information? In reaction to registration regimes that are too granular, the <a href="http://www.wired.com/news/print/0,1294,64270,00.html">bugmenot.com</a> hack abolishes granularity. But maybe there's a middle ground.
</p>

			</body>
			<dc:date>2004-07-27T07:43:09-05:00</dc:date>
			</item>
		<item>
			<title>HailStorm training wheels</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/07/21.html#a1045</link>
			<description>
&lt;blockquote&gt;
Many folks wouldn&apos;t want to be reminded how easy it is to convert sparse input into a detailed profile that includes a phone number, a street address, a satellite photo, and driving directions. Re-entering the basic facts each time perpetuates an illusion of privacy. Yet the reality, for many of us, is that these facts are public.
&lt;br/&gt;&lt;br/&gt;
Since I haven&apos;t told Google (or any other directories) to delete my records, I&apos;ve implicitly given permission for Web applications to use that data. Let me now make that permission explicit. I&apos;d be happy if a Web form made intelligent use of public information about me.
&lt;br/&gt;&lt;br/&gt;
I&apos;d be even happier if I could control the source of that data. Public information is a poorly defined concept, after all. There are online directories that still remember an address I vacated five years ago. I&apos;d like to maintain the facts about me that I deem public. When applications need those facts, I&apos;d like to refer them to a service that dispenses them. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/07/16/29OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote&gt;
Many folks wouldn&apos;t want to be reminded how easy it is to convert sparse input into a detailed profile that includes a phone number, a street address, a satellite photo, and driving directions. Re-entering the basic facts each time perpetuates an illusion of privacy. Yet the reality, for many of us, is that these facts are public.
&lt;br/&gt;&lt;br/&gt;
Since I haven&apos;t told Google (or any other directories) to delete my records, I&apos;ve implicitly given permission for Web applications to use that data. Let me now make that permission explicit. I&apos;d be happy if a Web form made intelligent use of public information about me.
&lt;br/&gt;&lt;br/&gt;
I&apos;d be even happier if I could control the source of that data. Public information is a poorly defined concept, after all. There are online directories that still remember an address I vacated five years ago. I&apos;d like to maintain the facts about me that I deem public. When applications need those facts, I&apos;d like to refer them to a service that dispenses them. [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/07/16/29OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
When I &lt;a href=&quot;http://weblog.infoworld.com/udell/2004/07/13.html#a1038&quot;&gt;previewed&lt;/a&gt; this column last week, it occurred to me that &lt;a href=&quot;http://www.foaf-project.org/&quot;&gt;FOAF&lt;/a&gt; is an example of a mechanism that empowers users to assert facts about themselves. I don&apos;t expect earth-shattering results from the publication of my &lt;a href=&quot;http://udell.roninhouse.com/foaf.xml&quot;&gt;own FOAF file&lt;/a&gt;. But if for now it does nothing more than neatly encapsulate certain facts I&apos;m sometimes asked to produce -- my picture, my bio -- that&apos;s useful.
&lt;/p&gt;
&lt;p&gt;
In theory, it would be straightforward for business homepages to adopt a similar approach. They all do the same stuff: About, Company, Products, News, Contact. There&apos;s an obvious XML format for News -- RSS -- but not for these other things. It&apos;s easy to imagine a virtuous cycle. Companies publish their facts in a structured form. As a result, more directories list them -- and do so more correctly. As a result, more companies are incented to publish XML facts. And yet in practice, this hasn&apos;t happened.
&lt;/p&gt;
&lt;p&gt;
Agreeing on a format is, of course, always a huge obstacle. But I suspect the Web design reflexes that we carry forward from the 90s are also getting in the way. It&apos;s been a very long time since I visited a company&apos;s home page and thought: &quot;Wow, get a load of those DHTML menu effects!&quot; Or: &quot;Nice font!&quot; I&apos;m there for the information, and I&apos;ll shred the site trying to find it, grumbling the whole time. I know I&apos;m not the only one who feels this way.
&lt;/p&gt;
&lt;p&gt;
Of course I&apos;m not wholly insensitive to aesthetics. In fact, I worship CSS wizards who can dress a skeleton of structured information in beautiful clothing. But people really hate looking at, or thinking about, that skeleton. Steve Jobs&apos; demonstration of Safari RSS at Apple&apos;s recent developer conference was a great example. At one point, he flipped back and forth between the skeletal (RSS) and clothed (Web) views of a page. It was the least compelling moment of the keynote. Jobs himself sounded unconvinced, and the audience responded with silence.
&lt;/p&gt;
&lt;p&gt;
It&apos;d be great if business websites formed a FOAF-like &quot;web of machine-readable home pages.&quot; But I don&apos;t expect that&apos;ll happen anytime soon. When people look at websites through X-ray glasses, they don&apos;t like what they see.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote>
Many folks wouldn't want to be reminded how easy it is to convert sparse input into a detailed profile that includes a phone number, a street address, a satellite photo, and driving directions. Re-entering the basic facts each time perpetuates an illusion of privacy. Yet the reality, for many of us, is that these facts are public.
<br/><br/>
Since I haven't told Google (or any other directories) to delete my records, I've implicitly given permission for Web applications to use that data. Let me now make that permission explicit. I'd be happy if a Web form made intelligent use of public information about me.
<br/><br/>
I'd be even happier if I could control the source of that data. Public information is a poorly defined concept, after all. There are online directories that still remember an address I vacated five years ago. I'd like to maintain the facts about me that I deem public. When applications need those facts, I'd like to refer them to a service that dispenses them. [Full story at <a href="http://www.infoworld.com/article/04/07/16/29OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
</p>
<p>
When I <a href="http://weblog.infoworld.com/udell/2004/07/13.html#a1038">previewed</a> this column last week, it occurred to me that <a href="http://www.foaf-project.org/">FOAF</a> is an example of a mechanism that empowers users to assert facts about themselves. I don't expect earth-shattering results from the publication of my <a href="http://udell.roninhouse.com/foaf.xml">own FOAF file</a>. But if for now it does nothing more than neatly encapsulate certain facts I'm sometimes asked to produce -- my picture, my bio -- that's useful.
</p>
<p>
In theory, it would be straightforward for business homepages to adopt a similar approach. They all do the same stuff: About, Company, Products, News, Contact. There's an obvious XML format for News -- RSS -- but not for these other things. It's easy to imagine a virtuous cycle. Companies publish their facts in a structured form. As a result, more directories list them -- and do so more correctly. As a result, more companies are incented to publish XML facts. And yet in practice, this hasn't happened.
</p>
<p>
Agreeing on a format is, of course, always a huge obstacle. But I suspect the Web design reflexes that we carry forward from the 90s are also getting in the way. It's been a very long time since I visited a company's home page and thought: "Wow, get a load of those DHTML menu effects!" Or: "Nice font!" I'm there for the information, and I'll shred the site trying to find it, grumbling the whole time. I know I'm not the only one who feels this way.
</p>
<p>
Of course I'm not wholly insensitive to aesthetics. In fact, I worship CSS wizards who can dress a skeleton of structured information in beautiful clothing. But people really hate looking at, or thinking about, that skeleton. Steve Jobs' demonstration of Safari RSS at Apple's recent developer conference was a great example. At one point, he flipped back and forth between the skeletal (RSS) and clothed (Web) views of a page. It was the least compelling moment of the keynote. Jobs himself sounded unconvinced, and the audience responded with silence.
</p>
<p>
It'd be great if business websites formed a FOAF-like "web of machine-readable home pages." But I don't expect that'll happen anytime soon. When people look at websites through X-ray glasses, they don't like what they see.
</p>

			</body>
			<dc:date>2004-07-21T10:53:42-05:00</dc:date>
			</item>
		<item>
			<title>Longhorn follow-up: Quentin Clark interview</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/07/20.html#a1044</link>
			<description>
The &lt;a href=&quot;http://www.infoworld.com/reports/29SRlonghorn.html&quot;&gt;Longhorn cover story&lt;/a&gt; ran this week. It includes a &lt;a href=&quot;http://www.infoworld.com/article/04/07/16/29FElonghorn_1.html&quot;&gt;main story&lt;/a&gt;, an &lt;a href=&quot;http://www.infoworld.com/article/04/07/16/29FElonghornclark_1.html&quot;&gt;interview with Quentin Clark&lt;/a&gt;, and an &lt;a href=&quot;http://www.infoworld.com/article/04/07/16/29FElonghornreich_1.html&quot;&gt;interview with Miguel de Icaza and Brendan Eich&lt;/a&gt;. Here are some outtakes from my interview with Quentin Clark, director of program management for WinFS.
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
The &lt;a href=&quot;http://www.infoworld.com/reports/29SRlonghorn.html&quot;&gt;Longhorn cover story&lt;/a&gt; ran this week. It includes a &lt;a href=&quot;http://www.infoworld.com/article/04/07/16/29FElonghorn_1.html&quot;&gt;main story&lt;/a&gt;, an &lt;a href=&quot;http://www.infoworld.com/article/04/07/16/29FElonghornclark_1.html&quot;&gt;interview with Quentin Clark&lt;/a&gt;, and an &lt;a href=&quot;http://www.infoworld.com/article/04/07/16/29FElonghornreich_1.html&quot;&gt;interview with Miguel de Icaza and Brendan Eich&lt;/a&gt;. Here are some outtakes from my interview with Quentin Clark, director of program management for WinFS.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;On XML datatypes&lt;/b&gt;
&lt;/p&gt;
&lt;blockquote class=&quot;personQuote QuentinClark&quot;&gt;
We see being able to store structured data (like contacts), semi-structured data (XML), and unstructured data. In the case of a Word document, the XML isn&apos;t described by the doc type in WinFS, but the WinFS type defines an XML datatype, you can stick in the XML there, and we can reason over that. A JPEG, when you pull off the excess headers, is just a series of 1s and 0s you feed into an algorithm, that will never be structured. But even within a WinFS type, like a doctype, we allow for all three components to be within an instance of that type. A photo is a good example. We have a picture/photo type, things like what camera model, where the picture was taken, plus the unstructured bitstream. With respect to metadata handling -- and property promotion is only part of that -- we talk about picking the author out of a Word doc, putting it into a WinFS property. We also have property demotion, so coming through the APIs you can reprogram the title of some item, and it finds its way back into the filestream. 
&lt;br/&gt;&lt;br/&gt;
Just ignore WinFS types for a second, let&apos;s say I don&apos;t need no stinking types, I&apos;m gonna build my own.  You can make it from scalars, the XML datatype, and a binary field. We&apos;ve defined the Windows doctype to have the ability to have a filestream as well as an XML datatype. That gives you a lot of power. You can walk up to WinFS, create a scope -- all documents, the whole store -- and then issue XPath queries into items that have XML datatypes, then we can go reason over those things. 
&lt;/blockquote&gt;
&lt;p&gt;
&lt;b&gt;On sharing&lt;/b&gt;
&lt;/p&gt;
&lt;blockquote class=&quot;personQuote QuentinClark&quot;&gt;
We want to use synch as a way to enable people to share stuff with each other, and to enable offline experiences. It&apos;s the Outlook 11 idea that I&apos;m working always locally -- we&apos;re bringing that model to all data. You&apos;ll have ability to use any scoping mechanisms -- querying, or explicit wrangling where you drop 16 things into a list -- and say, hey, I want to share this with whatever, another machine or with another person. 
&lt;br/&gt;&lt;br/&gt;
Relationships that exist within the scoping are no problem, we know how to rehydrate them on the other end. For relationships outside the boundary, there&apos;s a couple of different mechanisms. So if you got the document from me, but I didn&apos;t give you contacts, then if you do have that contact, Sarah Wiley, on your end, we&apos;ll reconstitute the relationship. If it&apos;s not a thing we can positively identify, then it would dangle. But after the PDC we changed the data model to make dangling references not really dangle any more. There was a point where we tried to work through the user experience of finding and showing danglers where we realized hmmm, that sucks, people won&apos;t know why are they even doing this.  Can we change how we store and model the data so that&apos;s not an issue? So you&apos;ll have a document, and an author, and the system knows nothing about that author because you don&apos;t.
&lt;/blockquote&gt;
&lt;p&gt;
&lt;b&gt;On things being in more than one place&lt;/b&gt;
&lt;/p&gt;
&lt;blockquote class=&quot;personQuote QuentinClark&quot;&gt;
Consider three scenarios. First, I want to keep a list of stuff I need to do today -- a piece of mail, the notes preparing me for this call. Let&apos;s assume there&apos;s no query-based way to do this, it requires explicit wrangling. 
&lt;br/&gt;&lt;br/&gt;
Second: in Outlook 11 I have search folders -- stuff from direct staff, stuff where I&apos;m on the To line, the Cc line -- I use these every day as part of my reasoning over my life. A lot of the reasons you want to do things in that query way imply that you don&apos;t want to manually intervene. You wouldn&apos;t want to inform the system manually about the To line, although you tell the system that my staff is the following people.
&lt;br/&gt;&lt;br/&gt;
The third case is about where you want things to live, physically. Where they are contained. In Outlook, I have a PST and the OST, which is the reflection of my online Exchange mailbox.  No big surprise, the 200MB Microsoft gives me is not big enough to contain all my mail, so I have PSTs to keep stuff. That&apos;s a containment thing, where do I want it to actually live? I have a removable hard drive at home, at some point I decide this photo will live there. 
&lt;br/&gt;&lt;br/&gt;
So those are the three axes. The limitation of Outlook 11 is that it doesn&apos;t allow you to put an item in more than one user lassooing. We want to allow multiple lists, or folders, where you can put the same thing in both. We&apos;re removing that Outlook limitation. 
&lt;br/&gt;&lt;br/&gt;
We encountered significant design challenges around user experience and expectations, and also problems around the DAG (directed acyclic graph). Consider security. I take an item, it lives in a bunch of folders, what is the security on that thing? Folder 2 has it too, then moves to folder 3. All the way back on folder 1, does the owner have any way to know what&apos;s happened? Then there&apos;s naming. If I have a doc, call it &quot;jon&apos;s doc,&quot; created in a single folder, then I want to have it appear twice in that same folder, what is it called? If it&apos;s in a second folder, and I delete it from folder 1, then at some point I rename folders and put the doc back, calculating namespaces becomes complex. 
&lt;/blockquote&gt;
&lt;p&gt;
&lt;b&gt;On the object/relational/XML &quot;trinity&quot;&lt;/b&gt;
&lt;/p&gt;
&lt;blockquote class=&quot;personQuote QuentinClark&quot;&gt;
Why do you need all three? I take it that it&apos;s obvious why you need objects: you program to them. The CLR has given us some language independence, and we&apos;ve done a fairly good job building an object universe better than we had before, we&apos;re strong believers in that. As for XML, there&apos;s no argument there either. The big thing isn&apos;t turning out to be industry schemas, but the fact that you have this self-describing thing, this is what I can learn about it, and I can reason on it in a programmatic way by pulling it up into an object. 
&lt;br/&gt;&lt;br/&gt;
Then there&apos;s relational, this is harder to describe. I will observe that nobody has built an XML store that has the level of scale, performance, or capabilities of today&apos;s relational stores. It&apos;s just true that the relational model has a set of design characteristics that give it performance characteristics that are are just inherent. Doing things in the XML store doesn&apos;t give you the same benefit -- and that&apos;s not even accounting for the fact that there&apos;s so much data in relational stores today. 
&lt;br/&gt;&lt;br/&gt;
But we&apos;re taking the start of the Yukon XML work, and bringing it into WinFS. Our vision is a marriage of these worlds, this is why they did so much work around SQL/CLR in Yukon. And we&apos;ve done more since then in the WinFS part of the code. 
&lt;br/&gt;&lt;br/&gt;
Yukon doesn&apos;t reach the end of the journey, WinFS the client does not, but that&apos;s where they&apos;re headed. In terms of a data platform, that&apos;s what we want. This couples with the discussion of structured, unstructured, and semi-structured data. XPath doesn&apos;t make sense with the JPEG bitstream. Having that object/relational/XML trinity over a breadth of datatypes, that&apos;s the holy grail, that&apos;s completeness. 
&lt;/blockquote&gt;
&lt;p&gt;
&lt;b&gt;On WinFS benefits&lt;/b&gt;
&lt;/p&gt;
&lt;blockquote class=&quot;personQuote QuentinClark&quot;&gt;
First, having datatypes in Windows, so you can do things like program around a contact. The shared data is a huge benefit, though admittedly it&apos;s tricky to get it right. If you are Eudora or Act, how do we make sure you can plug in and own the contacts that are yours, while ensuring that Amazon can still query into a contact and pull out an address? 
&lt;br/&gt;&lt;br/&gt;
Second, the Outlook 11 experience of being always local. So an ISV builds a specialized app for architectural firms. Thanks to WinFS synch, the user can go offline and online. Using rules, if meeting notes come in that talk about changes in plans, he gets an action item. 
&lt;br/&gt;&lt;br/&gt;
Third, customized experience. If I drill into docs by Jon about WinFS, I can name that query, reuse it, write rules about it.
&lt;br/&gt;&lt;br/&gt;
Fourth, finding things. How many times do you get the call: &quot;I created this doc, help me find it.&quot; You&apos;ll never get that call again. If their field of view is too broad, they can narrow it easily. Fulltext search is there. Life will become a lot easier for end users. We had to turn off indexing in XP by default, it was too slow and chatty. When you&apos;re chasing the truth, it&apos;s hard to do. Being the truth is easier to do. When people come in and make changes, we know about it, we&apos;re built on a database.
&lt;/blockquote&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
The <a href="http://www.infoworld.com/reports/29SRlonghorn.html">Longhorn cover story</a> ran this week. It includes a <a href="http://www.infoworld.com/article/04/07/16/29FElonghorn_1.html">main story</a>, an <a href="http://www.infoworld.com/article/04/07/16/29FElonghornclark_1.html">interview with Quentin Clark</a>, and an <a href="http://www.infoworld.com/article/04/07/16/29FElonghornreich_1.html">interview with Miguel de Icaza and Brendan Eich</a>. Here are some outtakes from my interview with Quentin Clark, director of program management for WinFS.
</p>
<p>
<b>On XML datatypes</b>
</p>
<blockquote class="personQuote QuentinClark">
We see being able to store structured data (like contacts), semi-structured data (XML), and unstructured data. In the case of a Word document, the XML isn't described by the doc type in WinFS, but the WinFS type defines an XML datatype, you can stick in the XML there, and we can reason over that. A JPEG, when you pull off the excess headers, is just a series of 1s and 0s you feed into an algorithm, that will never be structured. But even within a WinFS type, like a doctype, we allow for all three components to be within an instance of that type. A photo is a good example. We have a picture/photo type, things like what camera model, where the picture was taken, plus the unstructured bitstream. With respect to metadata handling -- and property promotion is only part of that -- we talk about picking the author out of a Word doc, putting it into a WinFS property. We also have property demotion, so coming through the APIs you can reprogram the title of some item, and it finds its way back into the filestream. 
<br/><br/>
Just ignore WinFS types for a second, let's say I don't need no stinking types, I'm gonna build my own.  You can make it from scalars, the XML datatype, and a binary field. We've defined the Windows doctype to have the ability to have a filestream as well as an XML datatype. That gives you a lot of power. You can walk up to WinFS, create a scope -- all documents, the whole store -- and then issue XPath queries into items that have XML datatypes, then we can go reason over those things. 
</blockquote>
<p>
<b>On sharing</b>
</p>
<blockquote class="personQuote QuentinClark">
We want to use synch as a way to enable people to share stuff with each other, and to enable offline experiences. It's the Outlook 11 idea that I'm working always locally -- we're bringing that model to all data. You'll have ability to use any scoping mechanisms -- querying, or explicit wrangling where you drop 16 things into a list -- and say, hey, I want to share this with whatever, another machine or with another person. 
<br/><br/>
Relationships that exist within the scoping are no problem, we know how to rehydrate them on the other end. For relationships outside the boundary, there's a couple of different mechanisms. So if you got the document from me, but I didn't give you contacts, then if you do have that contact, Sarah Wiley, on your end, we'll reconstitute the relationship. If it's not a thing we can positively identify, then it would dangle. But after the PDC we changed the data model to make dangling references not really dangle any more. There was a point where we tried to work through the user experience of finding and showing danglers where we realized hmmm, that sucks, people won't know why are they even doing this.  Can we change how we store and model the data so that's not an issue? So you'll have a document, and an author, and the system knows nothing about that author because you don't.
</blockquote>
<p>
<b>On things being in more than one place</b>
</p>
<blockquote class="personQuote QuentinClark">
Consider three scenarios. First, I want to keep a list of stuff I need to do today -- a piece of mail, the notes preparing me for this call. Let's assume there's no query-based way to do this, it requires explicit wrangling. 
<br/><br/>
Second: in Outlook 11 I have search folders -- stuff from direct staff, stuff where I'm on the To line, the Cc line -- I use these every day as part of my reasoning over my life. A lot of the reasons you want to do things in that query way imply that you don't want to manually intervene. You wouldn't want to inform the system manually about the To line, although you tell the system that my staff is the following people.
<br/><br/>
The third case is about where you want things to live, physically. Where they are contained. In Outlook, I have a PST and the OST, which is the reflection of my online Exchange mailbox.  No big surprise, the 200MB Microsoft gives me is not big enough to contain all my mail, so I have PSTs to keep stuff. That's a containment thing, where do I want it to actually live? I have a removable hard drive at home, at some point I decide this photo will live there. 
<br/><br/>
So those are the three axes. The limitation of Outlook 11 is that it doesn't allow you to put an item in more than one user lassooing. We want to allow multiple lists, or folders, where you can put the same thing in both. We're removing that Outlook limitation. 
<br/><br/>
We encountered significant design challenges around user experience and expectations, and also problems around the DAG (directed acyclic graph). Consider security. I take an item, it lives in a bunch of folders, what is the security on that thing? Folder 2 has it too, then moves to folder 3. All the way back on folder 1, does the owner have any way to know what's happened? Then there's naming. If I have a doc, call it "jon's doc," created in a single folder, then I want to have it appear twice in that same folder, what is it called? If it's in a second folder, and I delete it from folder 1, then at some point I rename folders and put the doc back, calculating namespaces becomes complex. 
</blockquote>
<p>
<b>On the object/relational/XML "trinity"</b>
</p>
<blockquote class="personQuote QuentinClark">
Why do you need all three? I take it that it's obvious why you need objects: you program to them. The CLR has given us some language independence, and we've done a fairly good job building an object universe better than we had before, we're strong believers in that. As for XML, there's no argument there either. The big thing isn't turning out to be industry schemas, but the fact that you have this self-describing thing, this is what I can learn about it, and I can reason on it in a programmatic way by pulling it up into an object. 
<br/><br/>
Then there's relational, this is harder to describe. I will observe that nobody has built an XML store that has the level of scale, performance, or capabilities of today's relational stores. It's just true that the relational model has a set of design characteristics that give it performance characteristics that are are just inherent. Doing things in the XML store doesn't give you the same benefit -- and that's not even accounting for the fact that there's so much data in relational stores today. 
<br/><br/>
But we're taking the start of the Yukon XML work, and bringing it into WinFS. Our vision is a marriage of these worlds, this is why they did so much work around SQL/CLR in Yukon. And we've done more since then in the WinFS part of the code. 
<br/><br/>
Yukon doesn't reach the end of the journey, WinFS the client does not, but that's where they're headed. In terms of a data platform, that's what we want. This couples with the discussion of structured, unstructured, and semi-structured data. XPath doesn't make sense with the JPEG bitstream. Having that object/relational/XML trinity over a breadth of datatypes, that's the holy grail, that's completeness. 
</blockquote>
<p>
<b>On WinFS benefits</b>
</p>
<blockquote class="personQuote QuentinClark">
First, having datatypes in Windows, so you can do things like program around a contact. The shared data is a huge benefit, though admittedly it's tricky to get it right. If you are Eudora or Act, how do we make sure you can plug in and own the contacts that are yours, while ensuring that Amazon can still query into a contact and pull out an address? 
<br/><br/>
Second, the Outlook 11 experience of being always local. So an ISV builds a specialized app for architectural firms. Thanks to WinFS synch, the user can go offline and online. Using rules, if meeting notes come in that talk about changes in plans, he gets an action item. 
<br/><br/>
Third, customized experience. If I drill into docs by Jon about WinFS, I can name that query, reuse it, write rules about it.
<br/><br/>
Fourth, finding things. How many times do you get the call: "I created this doc, help me find it." You'll never get that call again. If their field of view is too broad, they can narrow it easily. Fulltext search is there. Life will become a lot easier for end users. We had to turn off indexing in XP by default, it was too slow and chatty. When you're chasing the truth, it's hard to do. Being the truth is easier to do. When people come in and make changes, we know about it, we're built on a database.
</blockquote>

			</body>
			<dc:date>2004-07-20T10:27:00-05:00</dc:date>
			</item>
		<item>
			<title>Edwin Khodabakchian interview</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/07/17.html#a1042</link>
			<description>
&lt;blockquote&gt;
BPEL (business process execution language) is the XML-based language of Web services &quot;orchestration&quot; -- that is, a means to connect multiple Web services to create end-to-end business processes. Recently, InfoWorld Test Center Lead Analyst Jon Udell interviewed BPEL expert Edwin Khodabakchian about the future of this language. Khodabakchian is CEO of Collaxa, a pure-play BPM startup whose BPM orchestration product has supported BPEL for more than a year. Collaxa was acquired by Oracle earlier this month, and its BPEL Server product is now marketed as Oracle BPEL Process Manager. Full story at [&lt;a href=&quot;http://www.infoworld.com/article/04/07/16/29FEbpmbpel_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote&gt;
BPEL (business process execution language) is the XML-based language of Web services &quot;orchestration&quot; -- that is, a means to connect multiple Web services to create end-to-end business processes. Recently, InfoWorld Test Center Lead Analyst Jon Udell interviewed BPEL expert Edwin Khodabakchian about the future of this language. Khodabakchian is CEO of Collaxa, a pure-play BPM startup whose BPM orchestration product has supported BPEL for more than a year. Collaxa was acquired by Oracle earlier this month, and its BPEL Server product is now marketed as Oracle BPEL Process Manager. Full story at [&lt;a href=&quot;http://www.infoworld.com/article/04/07/16/29FEbpmbpel_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
In this &lt;a href=&quot;http://weblog.infoworld.com/udell/gems/khodabakchian.mp3&quot;&gt;outtake&lt;/a&gt; from our interview, Edwin pushes back against the notion that BPEL is overly complex. A lot of the complexity, he argues, has to do with XML Schema, not BPEL itself. He goes on to describe how alternate bindings -- based on &lt;a href=&quot;http://ws.apache.org/wsif/&quot;&gt;WSIF&lt;/a&gt; and &lt;a href=&quot;http://www.jcp.org/en/jsr/detail?id=208&quot;&gt;JSR 208&lt;/a&gt;, as well as &lt;a href=&quot;http://msdn.microsoft.com/Longhorn/understanding/pillars/Indigo/default.aspx&quot;&gt;Indigo&lt;/a&gt; -- will extend BPEL&apos;s reach beyond SOAP Web services to the full range of legacy protocols.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote>
BPEL (business process execution language) is the XML-based language of Web services "orchestration" -- that is, a means to connect multiple Web services to create end-to-end business processes. Recently, InfoWorld Test Center Lead Analyst Jon Udell interviewed BPEL expert Edwin Khodabakchian about the future of this language. Khodabakchian is CEO of Collaxa, a pure-play BPM startup whose BPM orchestration product has supported BPEL for more than a year. Collaxa was acquired by Oracle earlier this month, and its BPEL Server product is now marketed as Oracle BPEL Process Manager. Full story at [<a href="http://www.infoworld.com/article/04/07/16/29FEbpmbpel_1.html">InfoWorld.com</a>]
</blockquote>
</p>
<p>
In this <a href="http://weblog.infoworld.com/udell/gems/khodabakchian.mp3">outtake</a> from our interview, Edwin pushes back against the notion that BPEL is overly complex. A lot of the complexity, he argues, has to do with XML Schema, not BPEL itself. He goes on to describe how alternate bindings -- based on <a href="http://ws.apache.org/wsif/">WSIF</a> and <a href="http://www.jcp.org/en/jsr/detail?id=208">JSR 208</a>, as well as <a href="http://msdn.microsoft.com/Longhorn/understanding/pillars/Indigo/default.aspx">Indigo</a> -- will extend BPEL's reach beyond SOAP Web services to the full range of legacy protocols.
</p>

			</body>
			<dc:date>2004-07-17T00:48:10-05:00</dc:date>
			</item>
		<item>
			<title>Web standards on the move</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/07/12.html#a1037</link>
			<description>
&lt;blockquote&gt;
WHATWG&apos;s home page asks rhetorically: &quot;Shouldn&apos;t this work be done at the W3C or the IETF?&quot; And it answers: &quot;Many of the members of this working group are active supporters and members of the W3C and other standardization bodies. We plan to submit our work for standardization to a standards body when it has reached an appropriate level of maturity.&quot; Bingo. That&apos;s how things used to work a decade ago when Web standards, and the applications built on them, formed a virtuous cycle of co-evolution.
&lt;br/&gt;&lt;br/&gt;
Another sign of forward motion came from the Mozilla Foundation, which announced last week that it will modernize the long-stagnant Netscape plug-in API in collaboration with Adobe, Apple, Macromedia, Opera, and Sun Microsystems. In other words, everyone but Microsoft. While Internet Explorer sits on the sidelines, benched by Avalon, the rest of the players are creating some excitement on the field. Go, team! [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/07/09/28OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
Brendan Eich amplified the themes of this column when he appeared last week on the &lt;a href=&quot;http://www.itconversations.com/shows/detail156.html&quot;&gt;Gillmor Gang&lt;/a&gt;. In &lt;a target=&quot;audio&quot; href=&quot;http://udell.infoworld.com:8002/?site=rdscon.vo.llnwd.net&amp;amp;url=/o1/_downloads/itc/mp3/2004/The%20Gillmor%20Gang%20-%20July%209,%202004.mp3&amp;amp;dur=01:07:52&amp;amp;beg=00:21:37&amp;amp;end=00:25:28&quot;&gt;this clip&lt;/a&gt; (21:37-25:28), Brendan talks about the tug of war between formal standards and real-world standards.
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote&gt;
WHATWG&apos;s home page asks rhetorically: &quot;Shouldn&apos;t this work be done at the W3C or the IETF?&quot; And it answers: &quot;Many of the members of this working group are active supporters and members of the W3C and other standardization bodies. We plan to submit our work for standardization to a standards body when it has reached an appropriate level of maturity.&quot; Bingo. That&apos;s how things used to work a decade ago when Web standards, and the applications built on them, formed a virtuous cycle of co-evolution.
&lt;br/&gt;&lt;br/&gt;
Another sign of forward motion came from the Mozilla Foundation, which announced last week that it will modernize the long-stagnant Netscape plug-in API in collaboration with Adobe, Apple, Macromedia, Opera, and Sun Microsystems. In other words, everyone but Microsoft. While Internet Explorer sits on the sidelines, benched by Avalon, the rest of the players are creating some excitement on the field. Go, team! [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/07/09/28OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;]
&lt;/blockquote&gt;
Brendan Eich amplified the themes of this column when he appeared last week on the &lt;a href=&quot;http://www.itconversations.com/shows/detail156.html&quot;&gt;Gillmor Gang&lt;/a&gt;. In &lt;a target=&quot;audio&quot; href=&quot;http://udell.infoworld.com:8002/?site=rdscon.vo.llnwd.net&amp;amp;url=/o1/_downloads/itc/mp3/2004/The%20Gillmor%20Gang%20-%20July%209,%202004.mp3&amp;amp;dur=01:07:52&amp;amp;beg=00:21:37&amp;amp;end=00:25:28&quot;&gt;this clip&lt;/a&gt; (21:37-25:28), Brendan talks about the tug of war between formal standards and real-world standards.
&lt;/p&gt;
&lt;p&gt;
There&apos;s more history and passion wrapped up in all this than I can begin to understand, though Tim Bray&apos;s &lt;a href=&quot;http://www.tbray.org/ongoing/When/200x/2004/07/08/SafariHTML&quot;&gt;comments&lt;/a&gt; at the end of last week offer some glimpses. Tim was, however, relieved to see that Safari may encapsulate its Dashboard-related extensions in a &quot;pseudo&quot;-namespace -- which seems entirely reasonable to me as well. And despite misgivings, he was listening to Brendan and &quot;not hearing much to disagree with.&quot; 
&lt;/p&gt;
&lt;p&gt;
The bottom line, for me, is that the browser is the most powerful engine for creating and distributing software that the world has ever seen. Its birth was a messy affair, and its adolescent growth spurt -- if that&apos;s what this is -- might not be pretty either. But I&apos;d really like to see it reach for its full potential.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote>
WHATWG's home page asks rhetorically: "Shouldn't this work be done at the W3C or the IETF?" And it answers: "Many of the members of this working group are active supporters and members of the W3C and other standardization bodies. We plan to submit our work for standardization to a standards body when it has reached an appropriate level of maturity." Bingo. That's how things used to work a decade ago when Web standards, and the applications built on them, formed a virtuous cycle of co-evolution.
<br/><br/>
Another sign of forward motion came from the Mozilla Foundation, which announced last week that it will modernize the long-stagnant Netscape plug-in API in collaboration with Adobe, Apple, Macromedia, Opera, and Sun Microsystems. In other words, everyone but Microsoft. While Internet Explorer sits on the sidelines, benched by Avalon, the rest of the players are creating some excitement on the field. Go, team! [Full story at <a href="http://www.infoworld.com/article/04/07/09/28OPstrategic_1.html">InfoWorld.com</a>]
</blockquote>
Brendan Eich amplified the themes of this column when he appeared last week on the <a href="http://www.itconversations.com/shows/detail156.html">Gillmor Gang</a>. In <a target="audio" href="http://udell.infoworld.com:8002/?site=rdscon.vo.llnwd.net&amp;url=/o1/_downloads/itc/mp3/2004/The%20Gillmor%20Gang%20-%20July%209,%202004.mp3&amp;dur=01:07:52&amp;beg=00:21:37&amp;end=00:25:28">this clip</a> (21:37-25:28), Brendan talks about the tug of war between formal standards and real-world standards.
</p>
<p>
There's more history and passion wrapped up in all this than I can begin to understand, though Tim Bray's <a href="http://www.tbray.org/ongoing/When/200x/2004/07/08/SafariHTML">comments</a> at the end of last week offer some glimpses. Tim was, however, relieved to see that Safari may encapsulate its Dashboard-related extensions in a "pseudo"-namespace -- which seems entirely reasonable to me as well. And despite misgivings, he was listening to Brendan and "not hearing much to disagree with." 
</p>
<p>
The bottom line, for me, is that the browser is the most powerful engine for creating and distributing software that the world has ever seen. Its birth was a messy affair, and its adolescent growth spurt -- if that's what this is -- might not be pretty either. But I'd really like to see it reach for its full potential.
</p>

			</body>
			<dc:date>2004-07-12T08:38:09-05:00</dc:date>
			</item>
		<item>
			<title>Space, time, and data</title>
			<link>http://weblog.infoworld.com/udell/categories/infoworld/2004/06/30.html#a1031</link>
			<description>
&lt;blockquote&gt;
Scalable vector graphics and animation are two of the hallmark features of Macromedia&apos;s nearly ubiquitous multimedia player. Yet the company has done a poor job of creating -- or convincing third-party developers to create -- components that make it routine for people to work with spatial and temporal data. And in the recent push to legitimize Flash as a rich-client platform, the company has de-emphasized what is at the core of every Flash movie: its timeline.
&lt;br/&gt;&lt;br/&gt;
It&apos;s a hard sell, admittedly. Microsoft is also having a tough time articulating the business case for the scalable vector graphics, 3-D, and animation capabilities it&apos;s building into Avalon, the next-generation Windows graphics subsystem. My advice? Stop worshipping the raw power of next year&apos;s graphics processing unit, and start showing developers concrete ways to help users deal with their four-dimensional data.  [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/06/25/26OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;] 
&lt;/blockquote&gt;
&lt;a target=&quot;video&quot; href=&quot;http://autometa.com/rpxp/?quicktime/clip/video/start/1:14:30/stop/1:15:27/stream/http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov&quot;&gt;&lt;img align=&quot;right&quot; vspace=&quot;6&quot; hspace=&quot;6&quot; src=&quot;http://weblog.infoworld.com/udell/gems/electricZebras.jpg&quot;/&gt;&lt;/a&gt;
I hadn&apos;t yet seen Steve Jobs&apos; &lt;a target=&quot;video&quot; href=&quot;http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov&quot;&gt;WWDC keynote&lt;/a&gt; when I wrote this column. The demos, collectively, add up to a pretty convincing shot across Longhorn&apos;s bow. But I&apos;d level the same criticisms at Apple&apos;s use of its hot new graphics technologies. &lt;a target=&quot;video&quot; href=&quot;http://autometa.com/rpxp/?quicktime/clip/video/start/1:10:15/stop/1:10:39/stream/http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov&quot;&gt;Here&lt;/a&gt; Phil Schiller applies a bump distortion to an image of a tiger, and  &lt;a target=&quot;video&quot; href=&quot;http://autometa.com/rpxp/?quicktime/clip/video/start/1:14:30/stop/1:15:27/stream/http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov&quot;&gt;here&lt;/a&gt; he creates the Electric Zebras album cover. Later, Jobs casually shows off &lt;a target=&quot;video&quot; href=&quot;http://autometa.com/rpxp/?quicktime/clip/video/start/1:21:38/stop/1:22:08/stream/http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov&quot;&gt;liquid distortion&lt;/a&gt; as he drags Dashboard widgets onto the desktop. Absolutely luscious eye candy. But, to what end?
 &lt;b&gt;...&lt;/b&gt;</description>
			<content:encoded>&lt;p&gt;
&lt;blockquote&gt;
Scalable vector graphics and animation are two of the hallmark features of Macromedia&apos;s nearly ubiquitous multimedia player. Yet the company has done a poor job of creating -- or convincing third-party developers to create -- components that make it routine for people to work with spatial and temporal data. And in the recent push to legitimize Flash as a rich-client platform, the company has de-emphasized what is at the core of every Flash movie: its timeline.
&lt;br/&gt;&lt;br/&gt;
It&apos;s a hard sell, admittedly. Microsoft is also having a tough time articulating the business case for the scalable vector graphics, 3-D, and animation capabilities it&apos;s building into Avalon, the next-generation Windows graphics subsystem. My advice? Stop worshipping the raw power of next year&apos;s graphics processing unit, and start showing developers concrete ways to help users deal with their four-dimensional data.  [Full story at &lt;a href=&quot;http://www.infoworld.com/article/04/06/25/26OPstrategic_1.html&quot;&gt;InfoWorld.com&lt;/a&gt;] 
&lt;/blockquote&gt;
&lt;a target=&quot;video&quot; href=&quot;http://autometa.com/rpxp/?quicktime/clip/video/start/1:14:30/stop/1:15:27/stream/http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov&quot;&gt;&lt;img align=&quot;right&quot; vspace=&quot;6&quot; hspace=&quot;6&quot; src=&quot;http://weblog.infoworld.com/udell/gems/electricZebras.jpg&quot;/&gt;&lt;/a&gt;
I hadn&apos;t yet seen Steve Jobs&apos; &lt;a target=&quot;video&quot; href=&quot;http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov&quot;&gt;WWDC keynote&lt;/a&gt; when I wrote this column. The demos, collectively, add up to a pretty convincing shot across Longhorn&apos;s bow. But I&apos;d level the same criticisms at Apple&apos;s use of its hot new graphics technologies. &lt;a target=&quot;video&quot; href=&quot;http://autometa.com/rpxp/?quicktime/clip/video/start/1:10:15/stop/1:10:39/stream/http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov&quot;&gt;Here&lt;/a&gt; Phil Schiller applies a bump distortion to an image of a tiger, and  &lt;a target=&quot;video&quot; href=&quot;http://autometa.com/rpxp/?quicktime/clip/video/start/1:14:30/stop/1:15:27/stream/http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov&quot;&gt;here&lt;/a&gt; he creates the Electric Zebras album cover. Later, Jobs casually shows off &lt;a target=&quot;video&quot; href=&quot;http://autometa.com/rpxp/?quicktime/clip/video/start/1:21:38/stop/1:22:08/stream/http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov&quot;&gt;liquid distortion&lt;/a&gt; as he drags Dashboard widgets onto the desktop. Absolutely luscious eye candy. But, to what end?
&lt;/p&gt;
&lt;p&gt;
We live in an age of &lt;a href=&quot;http://www.amazon.com/exec/obidos/tg/detail/-/0679726012/&quot;&gt;innumeracy&lt;/a&gt;. The &quot;chartoon&quot; style of graphics that &lt;a href=&quot;http://www.nigelholmes.com/&quot;&gt;Nigel Holmes&lt;/a&gt; invented at Time has now, to my dismay, begun to cheapen the editorial page of the New York Times. Holmes&apos; arch-nemesis &lt;a href=&quot;http://www.edwardtufte.com/tufte/books_vdqi&quot;&gt;Edward Tufte&lt;/a&gt;, whom Salon aptly describes as a &lt;a href=&quot;http://www.salon.com/march97/tufte970310.html&quot;&gt;data artist&lt;/a&gt;, sets the bar for precise, intelligent, meaningful visualization of data. We don&apos;t get nearly enough of that, and it&apos;s not for lack of GPU horsepower or elegant APIs. The gating factor is that you can&apos;t bottle and sell the Tuftean sensibility. Still, we can try. I&apos;d like to see Apple or Macromedia or Microsoft put Tufte (or someone who thinks like him) in charge of a Manhattan program to produce a new breed of display widgets and data-wrangling wizards.  
&lt;/p&gt;
&lt;p&gt;
I was recently shown a stunning visualization of sales data based on the open source &lt;a href=&quot;http://treemap.sourceforge.net/&quot;&gt;Java Treemap Viewer&lt;/a&gt; (&lt;a href=&quot;http://www.cs.umd.edu/hcil/treemap-history/index.shtml&quot;&gt;background&lt;/a&gt;). Like the DateLens viewer I mention in this week&apos;s column, the Treemap viewer derives from pioneering work at the University of Maryland&apos;s &lt;a href=&quot;http://www.cs.umd.edu/hcil/&quot;&gt;Human-Computer Interaction Lab&lt;/a&gt;. I can&apos;t show you the actual visualization I saw because it&apos;s proprietary, but here&apos;s a &lt;a target=&quot;video&quot; href=&quot;http://www.cs.umd.edu/hcil/treemap/applet/index.shtml&quot;&gt;demo&lt;/a&gt;. This technique has been around for years. Of the real-life data sets that could be productively visualized this way, though, I&apos;ll wager that few are. I&apos;ve got a hunch there are a bunch of other techniques that are languishing in research labs too. The industry&apos;s challenge is to dig them up, refine them, and deliver them to developers and end users in ways that will really improve our data-driven communication.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Update&lt;/b&gt;: &lt;a href=&quot;http://www.webwerks.co.nz/weblog/&quot;&gt;Andrew Duncan&lt;/a&gt; wrote to remind me that I omitted another WWDC graphics demo: &lt;a target=&quot;video&quot; href=&quot;http://autometa.com/rpxp/?quicktime/clip/video/start/00:35:30/stop/00:37:48/stream/http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov&quot;&gt;Aran Anderson&apos;s stunning Orbit satellite simulator&lt;/a&gt;. &quot;If you need a non-trivial justification for all that GPU goodness,&quot; he asked, &quot;wouldn&apos;t Orbit qualify?&quot; That&apos;s a great point, thanks Andrew. An awesome app, indeed. As I mentioned in my column, scientific visualization has always been a voracious consumer of GPU cycles, but it has also tended to live in its own sci-viz ghetto. Now it&apos;s time for this stuff to break out into the world of mainstream business data.
&lt;/p&gt;
</content:encoded>
			<body xmlns="http://www.w3.org/1999/xhtml">
			<p>
<blockquote>
Scalable vector graphics and animation are two of the hallmark features of Macromedia's nearly ubiquitous multimedia player. Yet the company has done a poor job of creating -- or convincing third-party developers to create -- components that make it routine for people to work with spatial and temporal data. And in the recent push to legitimize Flash as a rich-client platform, the company has de-emphasized what is at the core of every Flash movie: its timeline.
<br/><br/>
It's a hard sell, admittedly. Microsoft is also having a tough time articulating the business case for the scalable vector graphics, 3-D, and animation capabilities it's building into Avalon, the next-generation Windows graphics subsystem. My advice? Stop worshipping the raw power of next year's graphics processing unit, and start showing developers concrete ways to help users deal with their four-dimensional data.  [Full story at <a href="http://www.infoworld.com/article/04/06/25/26OPstrategic_1.html">InfoWorld.com</a>] 
</blockquote>
<a target="video" href="http://autometa.com/rpxp/?quicktime/clip/video/start/1:14:30/stop/1:15:27/stream/http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov"><img align="right" vspace="6" hspace="6" src="http://weblog.infoworld.com/udell/gems/electricZebras.jpg"/></a>
I hadn't yet seen Steve Jobs' <a target="video" href="http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov">WWDC keynote</a> when I wrote this column. The demos, collectively, add up to a pretty convincing shot across Longhorn's bow. But I'd level the same criticisms at Apple's use of its hot new graphics technologies. <a target="video" href="http://autometa.com/rpxp/?quicktime/clip/video/start/1:10:15/stop/1:10:39/stream/http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov">Here</a> Phil Schiller applies a bump distortion to an image of a tiger, and  <a target="video" href="http://autometa.com/rpxp/?quicktime/clip/video/start/1:14:30/stop/1:15:27/stream/http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov">here</a> he creates the Electric Zebras album cover. Later, Jobs casually shows off <a target="video" href="http://autometa.com/rpxp/?quicktime/clip/video/start/1:21:38/stop/1:22:08/stream/http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov">liquid distortion</a> as he drags Dashboard widgets onto the desktop. Absolutely luscious eye candy. But, to what end?
</p>
<p>
We live in an age of <a href="http://www.amazon.com/exec/obidos/tg/detail/-/0679726012/">innumeracy</a>. The "chartoon" style of graphics that <a href="http://www.nigelholmes.com/">Nigel Holmes</a> invented at Time has now, to my dismay, begun to cheapen the editorial page of the New York Times. Holmes' arch-nemesis <a href="http://www.edwardtufte.com/tufte/books_vdqi">Edward Tufte</a>, whom Salon aptly describes as a <a href="http://www.salon.com/march97/tufte970310.html">data artist</a>, sets the bar for precise, intelligent, meaningful visualization of data. We don't get nearly enough of that, and it's not for lack of GPU horsepower or elegant APIs. The gating factor is that you can't bottle and sell the Tuftean sensibility. Still, we can try. I'd like to see Apple or Macromedia or Microsoft put Tufte (or someone who thinks like him) in charge of a Manhattan program to produce a new breed of display widgets and data-wrangling wizards.  
</p>
<p>
I was recently shown a stunning visualization of sales data based on the open source <a href="http://treemap.sourceforge.net/">Java Treemap Viewer</a> (<a href="http://www.cs.umd.edu/hcil/treemap-history/index.shtml">background</a>). Like the DateLens viewer I mention in this week's column, the Treemap viewer derives from pioneering work at the University of Maryland's <a href="http://www.cs.umd.edu/hcil/">Human-Computer Interaction Lab</a>. I can't show you the actual visualization I saw because it's proprietary, but here's a <a target="video" href="http://www.cs.umd.edu/hcil/treemap/applet/index.shtml">demo</a>. This technique has been around for years. Of the real-life data sets that could be productively visualized this way, though, I'll wager that few are. I've got a hunch there are a bunch of other techniques that are languishing in research labs too. The industry's challenge is to dig them up, refine them, and deliver them to developers and end users in ways that will really improve our data-driven communication.
</p>
<p>
<b>Update</b>: <a href="http://www.webwerks.co.nz/weblog/">Andrew Duncan</a> wrote to remind me that I omitted another WWDC graphics demo: <a target="video" href="http://autometa.com/rpxp/?quicktime/clip/video/start/00:35:30/stop/00:37:48/stream/http://stream.qtv.apple.com/events/jun/wwdc2004/wwdc_300_100_56_ref.mov">Aran Anderson's stunning Orbit satellite simulator</a>. "If you need a non-trivial justification for all that GPU goodness," he asked, "wouldn't Orbit qualify?" That's a great point, thanks Andrew. An awesome app, indeed. As I mentioned in my column, scientific visualization has always been a voracious consumer of GPU cycles, but it has also tended to live in its own sci-viz ghetto. Now it's time for this stuff to break out into the world of mainstream business data.
</p>

			</body>
			<dc:date>2004-06-30T11:14:16-05:00</dc:date>
			</item>
		</channel>
	</rss>
