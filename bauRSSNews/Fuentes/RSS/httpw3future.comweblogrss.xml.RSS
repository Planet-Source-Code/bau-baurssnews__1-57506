<?xml version="1.0"?>
<rss xmlns:e="http://purl.org/atom/ns#" version="0.91"><channel><title>Sjoerd Visscher's weblog</title><description>Pondering those web technologies that may change the future of the world wide web.</description><link>http://w3future.com/weblog/</link><managingEditor>sjoerd@w3future.com</managingEditor><language>en-us</language><item><link>http://w3future.com/weblog/2004/10/31.xml#dutchGovernmentSiteInXhtml11</link><title>Dutch government site in XHTML 1.1 </title><description>I just found this discussion about XHTML on the site of Anne van Kesteren. In the last comment Faruk Ates hopes that the Dutch government will make more valid websites in the future.
Well, he doesn't have to wait any longer. In the last few months I've had the privilege at Q42 to build the new Dutch Government's Advisory website. &#x2026;</description></item><item><link>http://w3future.com/weblog/2004/09/22.xml#closuresForAnonymousStorage</link><title>Closures for anonymous storage</title><description>Via The 80/20 Solution I saw a piece of Python code by John Lam, which he calls elegant. Now he is right to call it elegant &#x2014; he is comparing it with his experience to implement the same in C++. But he uses a technique which you see a lot in scripting, but which I find rather unelegant: creation of property names (or attribute names) with string manipulations. &#x2026;</description></item><item><link>http://w3future.com/weblog/2004/07/28.xml#implementingXhtml20</link><title>Implementing XHTML 2.0</title><description>Well, I slept off most of my desire to blog about XHTML 2.0, but here's a post anyway. The thing is, I don't think implementing elements using behaviors is really a good idea, although I feel bad saying it while the W3C is linking to my test implementation. &#x2026;</description></item><item><link>http://w3future.com/weblog/2004/07/24.xml#muchOfXhtml20WorksAlready</link><title>Much of XHTML 2.0 works already</title><description>A few days ago the W3C released the HTML and XHTML FAQ. I skimmed over it and saw no interesting things. So that was that.
Just now I saw a dramatic increase of visitors to this site. I was a bit surprised because there hasn't been any news on my site lately, and I had seen no new interesting referrers. &#x2026;</description></item><item><link>http://w3future.com/weblog/2004/06/08.xml#quicksortInMoiell</link><title>Quicksort in Moiell</title><description>An update on Moiell. Since the first post on Moiell I've been wanting to show you the quicksort example. But there was a bug in the implementation that prevented the example to run. And I wanted to be sure that I wasn't making a thinking error. The code is running now so here it is:
qsort : [|x::more|
  xs := more
  &gt; qsort(xs &lt; x), x, qsort(xs &gt;= x)
]

&gt; qsort(5,7,9,3,6,7,0,3,4)
First, to get that out of the way, xs := more is to kill the lazyness that was so useful in the prime sieve. &#x2026;</description></item><item><link>http://w3future.com/weblog/2004/06/01.xml#cheapChallengingAndCute</link><title>Cheap, challenging and cute!</title><description>I just have to do some advertising for a game called Complex. Not only because it is made by my Q42 colleague Martin Kool, but also because no other PocketPC puzzle game is worth your money more than this cute challenging cheap piece of software. Read this in depth review and download it at PocketGear. &#x2026;</description></item><item><link>http://w3future.com/weblog/2004/05/13.xml#moiellTeaser</link><title>Moiell teaser</title><description>Almost a year ago I wrote about adding sequences to Loell. I did a few attempts but failed. Then a month ago I implemented continuations in Javascript. (It's not pretty.) After that it went pretty smooth. All languages may by Turing complete, but some language features can make the difference between being able to solve a problem or not. &#x2026;</description></item></channel></rss>
